

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon May 29 08:49:05 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F1619
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    18                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    26                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    27                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    38                           	dabs	1,0x7E,2
    39     0000                     
    40                           ; Generated 09/02/2023 GMT
    41                           ; 
    42                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F1619 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74     0000                     	;# 
    75     0001                     	;# 
    76     0002                     	;# 
    77     0003                     	;# 
    78     0004                     	;# 
    79     0005                     	;# 
    80     0006                     	;# 
    81     0007                     	;# 
    82     0008                     	;# 
    83     0009                     	;# 
    84     000A                     	;# 
    85     000B                     	;# 
    86     000C                     	;# 
    87     000D                     	;# 
    88     000E                     	;# 
    89     0010                     	;# 
    90     0011                     	;# 
    91     0012                     	;# 
    92     0013                     	;# 
    93     0014                     	;# 
    94     0015                     	;# 
    95     0016                     	;# 
    96     0016                     	;# 
    97     0017                     	;# 
    98     0018                     	;# 
    99     0019                     	;# 
   100     001A                     	;# 
   101     001A                     	;# 
   102     001B                     	;# 
   103     001B                     	;# 
   104     001C                     	;# 
   105     001D                     	;# 
   106     001E                     	;# 
   107     001F                     	;# 
   108     008C                     	;# 
   109     008D                     	;# 
   110     008E                     	;# 
   111     0090                     	;# 
   112     0091                     	;# 
   113     0092                     	;# 
   114     0093                     	;# 
   115     0094                     	;# 
   116     0095                     	;# 
   117     0096                     	;# 
   118     0098                     	;# 
   119     0099                     	;# 
   120     009A                     	;# 
   121     009B                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009E                     	;# 
   126     009F                     	;# 
   127     010C                     	;# 
   128     010D                     	;# 
   129     010E                     	;# 
   130     0111                     	;# 
   131     0112                     	;# 
   132     0113                     	;# 
   133     0114                     	;# 
   134     0115                     	;# 
   135     0116                     	;# 
   136     0117                     	;# 
   137     0118                     	;# 
   138     0119                     	;# 
   139     011C                     	;# 
   140     018C                     	;# 
   141     018D                     	;# 
   142     018E                     	;# 
   143     0191                     	;# 
   144     0191                     	;# 
   145     0192                     	;# 
   146     0193                     	;# 
   147     0193                     	;# 
   148     0194                     	;# 
   149     0195                     	;# 
   150     0196                     	;# 
   151     0197                     	;# 
   152     0199                     	;# 
   153     0199                     	;# 
   154     0199                     	;# 
   155     019A                     	;# 
   156     019A                     	;# 
   157     019A                     	;# 
   158     019B                     	;# 
   159     019B                     	;# 
   160     019B                     	;# 
   161     019B                     	;# 
   162     019B                     	;# 
   163     019C                     	;# 
   164     019C                     	;# 
   165     019C                     	;# 
   166     019D                     	;# 
   167     019D                     	;# 
   168     019D                     	;# 
   169     019E                     	;# 
   170     019E                     	;# 
   171     019E                     	;# 
   172     019F                     	;# 
   173     019F                     	;# 
   174     019F                     	;# 
   175     019F                     	;# 
   176     019F                     	;# 
   177     020C                     	;# 
   178     020D                     	;# 
   179     020E                     	;# 
   180     0211                     	;# 
   181     0211                     	;# 
   182     0212                     	;# 
   183     0212                     	;# 
   184     0213                     	;# 
   185     0213                     	;# 
   186     0214                     	;# 
   187     0214                     	;# 
   188     0215                     	;# 
   189     0215                     	;# 
   190     0215                     	;# 
   191     0215                     	;# 
   192     0216                     	;# 
   193     0216                     	;# 
   194     0217                     	;# 
   195     0217                     	;# 
   196     028C                     	;# 
   197     028D                     	;# 
   198     028E                     	;# 
   199     0291                     	;# 
   200     0291                     	;# 
   201     0292                     	;# 
   202     0293                     	;# 
   203     0294                     	;# 
   204     0298                     	;# 
   205     0298                     	;# 
   206     0299                     	;# 
   207     029A                     	;# 
   208     029B                     	;# 
   209     029E                     	;# 
   210     030C                     	;# 
   211     030D                     	;# 
   212     030E                     	;# 
   213     038C                     	;# 
   214     038D                     	;# 
   215     038E                     	;# 
   216     0391                     	;# 
   217     0392                     	;# 
   218     0393                     	;# 
   219     0394                     	;# 
   220     0395                     	;# 
   221     0396                     	;# 
   222     0397                     	;# 
   223     0398                     	;# 
   224     0399                     	;# 
   225     040E                     	;# 
   226     0413                     	;# 
   227     0413                     	;# 
   228     0414                     	;# 
   229     0414                     	;# 
   230     0415                     	;# 
   231     0416                     	;# 
   232     0417                     	;# 
   233     0418                     	;# 
   234     041A                     	;# 
   235     041A                     	;# 
   236     041B                     	;# 
   237     041B                     	;# 
   238     041C                     	;# 
   239     041D                     	;# 
   240     041E                     	;# 
   241     041F                     	;# 
   242     0493                     	;# 
   243     0494                     	;# 
   244     0495                     	;# 
   245     0496                     	;# 
   246     049A                     	;# 
   247     049B                     	;# 
   248     049C                     	;# 
   249     049D                     	;# 
   250     058C                     	;# 
   251     058C                     	;# 
   252     058D                     	;# 
   253     058E                     	;# 
   254     058E                     	;# 
   255     058F                     	;# 
   256     0590                     	;# 
   257     0590                     	;# 
   258     0591                     	;# 
   259     0592                     	;# 
   260     0592                     	;# 
   261     0593                     	;# 
   262     0594                     	;# 
   263     0594                     	;# 
   264     0595                     	;# 
   265     0596                     	;# 
   266     0596                     	;# 
   267     0597                     	;# 
   268     0598                     	;# 
   269     0599                     	;# 
   270     059A                     	;# 
   271     059B                     	;# 
   272     059B                     	;# 
   273     059C                     	;# 
   274     059D                     	;# 
   275     060C                     	;# 
   276     060C                     	;# 
   277     060D                     	;# 
   278     060E                     	;# 
   279     060F                     	;# 
   280     060F                     	;# 
   281     0610                     	;# 
   282     0611                     	;# 
   283     0612                     	;# 
   284     0613                     	;# 
   285     0614                     	;# 
   286     0617                     	;# 
   287     0617                     	;# 
   288     0618                     	;# 
   289     0619                     	;# 
   290     061A                     	;# 
   291     061A                     	;# 
   292     061B                     	;# 
   293     061C                     	;# 
   294     0691                     	;# 
   295     0692                     	;# 
   296     0693                     	;# 
   297     0694                     	;# 
   298     0695                     	;# 
   299     0696                     	;# 
   300     0697                     	;# 
   301     0699                     	;# 
   302     069A                     	;# 
   303     0711                     	;# 
   304     0712                     	;# 
   305     0713                     	;# 
   306     0714                     	;# 
   307     0715                     	;# 
   308     0718                     	;# 
   309     0718                     	;# 
   310     0719                     	;# 
   311     071A                     	;# 
   312     071A                     	;# 
   313     071B                     	;# 
   314     071C                     	;# 
   315     071D                     	;# 
   316     0791                     	;# 
   317     0791                     	;# 
   318     0792                     	;# 
   319     0793                     	;# 
   320     0793                     	;# 
   321     0794                     	;# 
   322     0795                     	;# 
   323     0795                     	;# 
   324     0796                     	;# 
   325     0797                     	;# 
   326     0797                     	;# 
   327     0798                     	;# 
   328     0799                     	;# 
   329     079A                     	;# 
   330     080C                     	;# 
   331     080C                     	;# 
   332     080D                     	;# 
   333     080E                     	;# 
   334     080E                     	;# 
   335     080F                     	;# 
   336     0810                     	;# 
   337     0810                     	;# 
   338     0811                     	;# 
   339     0812                     	;# 
   340     0812                     	;# 
   341     0813                     	;# 
   342     0814                     	;# 
   343     0815                     	;# 
   344     0816                     	;# 
   345     0817                     	;# 
   346     0818                     	;# 
   347     0819                     	;# 
   348     081A                     	;# 
   349     081A                     	;# 
   350     081B                     	;# 
   351     081C                     	;# 
   352     081C                     	;# 
   353     081D                     	;# 
   354     088C                     	;# 
   355     088D                     	;# 
   356     088E                     	;# 
   357     088F                     	;# 
   358     088F                     	;# 
   359     0890                     	;# 
   360     0891                     	;# 
   361     0892                     	;# 
   362     0893                     	;# 
   363     0893                     	;# 
   364     0894                     	;# 
   365     0895                     	;# 
   366     0896                     	;# 
   367     0897                     	;# 
   368     0897                     	;# 
   369     0898                     	;# 
   370     0899                     	;# 
   371     0D8C                     	;# 
   372     0D8C                     	;# 
   373     0D8D                     	;# 
   374     0D8E                     	;# 
   375     0D8F                     	;# 
   376     0D8F                     	;# 
   377     0D90                     	;# 
   378     0D91                     	;# 
   379     0D92                     	;# 
   380     0D92                     	;# 
   381     0D93                     	;# 
   382     0D94                     	;# 
   383     0D95                     	;# 
   384     0D95                     	;# 
   385     0D96                     	;# 
   386     0D97                     	;# 
   387     0D98                     	;# 
   388     0D99                     	;# 
   389     0D9A                     	;# 
   390     0D9B                     	;# 
   391     0D9C                     	;# 
   392     0D9D                     	;# 
   393     0D9E                     	;# 
   394     0D9E                     	;# 
   395     0D9F                     	;# 
   396     0DA0                     	;# 
   397     0DA1                     	;# 
   398     0DA1                     	;# 
   399     0DA2                     	;# 
   400     0DA3                     	;# 
   401     0DA4                     	;# 
   402     0DA4                     	;# 
   403     0DA5                     	;# 
   404     0DA6                     	;# 
   405     0DA7                     	;# 
   406     0DA7                     	;# 
   407     0DA8                     	;# 
   408     0DA9                     	;# 
   409     0DAA                     	;# 
   410     0DAB                     	;# 
   411     0DAC                     	;# 
   412     0DAD                     	;# 
   413     0DAE                     	;# 
   414     0DAF                     	;# 
   415     0E0F                     	;# 
   416     0E10                     	;# 
   417     0E11                     	;# 
   418     0E12                     	;# 
   419     0E13                     	;# 
   420     0E14                     	;# 
   421     0E15                     	;# 
   422     0E16                     	;# 
   423     0E17                     	;# 
   424     0E18                     	;# 
   425     0E19                     	;# 
   426     0E1A                     	;# 
   427     0E1B                     	;# 
   428     0E1C                     	;# 
   429     0E1D                     	;# 
   430     0E1E                     	;# 
   431     0E1F                     	;# 
   432     0E20                     	;# 
   433     0E21                     	;# 
   434     0E22                     	;# 
   435     0E23                     	;# 
   436     0E24                     	;# 
   437     0E25                     	;# 
   438     0E26                     	;# 
   439     0E27                     	;# 
   440     0E28                     	;# 
   441     0E29                     	;# 
   442     0E2A                     	;# 
   443     0E2B                     	;# 
   444     0E2C                     	;# 
   445     0E2D                     	;# 
   446     0E2E                     	;# 
   447     0E90                     	;# 
   448     0E91                     	;# 
   449     0E92                     	;# 
   450     0E94                     	;# 
   451     0E95                     	;# 
   452     0E9C                     	;# 
   453     0E9D                     	;# 
   454     0E9E                     	;# 
   455     0E9F                     	;# 
   456     0EA0                     	;# 
   457     0EA1                     	;# 
   458     0EA2                     	;# 
   459     0EA3                     	;# 
   460     0EA4                     	;# 
   461     0EA5                     	;# 
   462     0EA6                     	;# 
   463     0EA7                     	;# 
   464     0F0F                     	;# 
   465     0F10                     	;# 
   466     0F11                     	;# 
   467     0F12                     	;# 
   468     0F13                     	;# 
   469     0F14                     	;# 
   470     0F15                     	;# 
   471     0F16                     	;# 
   472     0F17                     	;# 
   473     0F18                     	;# 
   474     0F19                     	;# 
   475     0F1A                     	;# 
   476     0F1B                     	;# 
   477     0F1C                     	;# 
   478     0F1D                     	;# 
   479     0F1E                     	;# 
   480     0F1F                     	;# 
   481     0F20                     	;# 
   482     0F21                     	;# 
   483     0F22                     	;# 
   484     0F23                     	;# 
   485     0F24                     	;# 
   486     0F25                     	;# 
   487     0F26                     	;# 
   488     0F27                     	;# 
   489     0F28                     	;# 
   490     0F29                     	;# 
   491     0F2A                     	;# 
   492     0F2B                     	;# 
   493     0F2C                     	;# 
   494     0F2D                     	;# 
   495     0F2E                     	;# 
   496     0F2F                     	;# 
   497     0F30                     	;# 
   498     0F31                     	;# 
   499     0F32                     	;# 
   500     0F33                     	;# 
   501     0F34                     	;# 
   502     0F35                     	;# 
   503     0F36                     	;# 
   504     0F37                     	;# 
   505     0FE4                     	;# 
   506     0FE5                     	;# 
   507     0FE6                     	;# 
   508     0FE7                     	;# 
   509     0FE8                     	;# 
   510     0FE9                     	;# 
   511     0FEA                     	;# 
   512     0FEB                     	;# 
   513     0FED                     	;# 
   514     0FEE                     	;# 
   515     0FEF                     	;# 
   516     000E                     _PORTC	set	14
   517     000D                     _PORTB	set	13
   518     000C                     _PORTA	set	12
   519     000B                     _INTCONbits	set	11
   520     0015                     _TMR0	set	21
   521     000E                     _PORTCbits	set	14
   522     008E                     _TRISC	set	142
   523     008D                     _TRISB	set	141
   524     008C                     _TRISA	set	140
   525     0098                     _OSCTUNE	set	152
   526     0099                     _OSCCONbits	set	153
   527     0095                     _OPTION_REG	set	149
   528     008E                     _TRISCbits	set	142
   529     010D                     _LATBbits	set	269
   530     018E                     _ANSELC	set	398
   531     018D                     _ANSELB	set	397
   532     018C                     _ANSELA	set	396
   533     0E13                     _T1GPPS	set	3603
   534                           
   535                           	psect	stringtext1
   536     0764                     __pstringtext1:
   537     0764                     STR_4:
   538     0764  3454               	retlw	84	;'T'
   539     0765  3465               	retlw	101	;'e'
   540     0766  3473               	retlw	115	;'s'
   541     0767  3474               	retlw	116	;'t'
   542     0768  3469               	retlw	105	;'i'
   543     0769  346E               	retlw	110	;'n'
   544     076A  3467               	retlw	103	;'g'
   545     076B  3420               	retlw	32	;' '
   546     076C  344C               	retlw	76	;'L'
   547     076D  3443               	retlw	67	;'C'
   548     076E  3444               	retlw	68	;'D'
   549     076F  3400               	retlw	0
   550                           
   551                           	psect	stringtext2
   552     0770                     __pstringtext2:
   553     0770                     STR_1:
   554     0770  3443               	retlw	67	;'C'
   555     0771  3475               	retlw	117	;'u'
   556     0772  3465               	retlw	101	;'e'
   557     0773  346E               	retlw	110	;'n'
   558     0774  3474               	retlw	116	;'t'
   559     0775  3461               	retlw	97	;'a'
   560     0776  3420               	retlw	32	;' '
   561     0777  3425               	retlw	37	;'%'
   562     0778  3430               	retlw	48	;'0'
   563     0779  3433               	retlw	51	;'3'
   564     077A  3464               	retlw	100	;'d'
   565     077B  3400               	retlw	0
   566                           
   567                           	psect	stringtext3
   568     077C                     __pstringtext3:
   569     077C                     STR_2:
   570     077C  3444               	retlw	68	;'D'
   571     077D  3445               	retlw	69	;'E'
   572     077E  3443               	retlw	67	;'C'
   573     077F  343A               	retlw	58	;':'
   574     0780  3420               	retlw	32	;' '
   575     0781  3425               	retlw	37	;'%'
   576     0782  3430               	retlw	48	;'0'
   577     0783  3433               	retlw	51	;'3'
   578     0784  3464               	retlw	100	;'d'
   579     0785  3400               	retlw	0
   580                           
   581                           	psect	stringtext4
   582     078F                     __pstringtext4:
   583     078F                     STR_5:
   584     078F  3454               	retlw	84	;'T'
   585     0790  3468               	retlw	104	;'h'
   586     0791  3461               	retlw	97	;'a'
   587     0792  346E               	retlw	110	;'n'
   588     0793  346B               	retlw	107	;'k'
   589     0794  3473               	retlw	115	;'s'
   590     0795  3400               	retlw	0
   591                           
   592                           	psect	stringtext5
   593     0796                     __pstringtext5:
   594     0796                     STR_6:
   595     0796  3454               	retlw	84	;'T'
   596     0797  3468               	retlw	104	;'h'
   597     0798  3461               	retlw	97	;'a'
   598     0799  346E               	retlw	110	;'n'
   599     079A  346B               	retlw	107	;'k'
   600     079B  3400               	retlw	0
   601                           
   602                           	psect	stringtext6
   603     0000                     __pstringtext6:
   604     0770                     
   605                           	psect	cinit
   606     001E                     start_initialization:	
   607                           ; #config settings
   608                           
   609     001E                     __initialization:
   610                           
   611                           ; Clear objects allocated to BANK0
   612     001E  3061               	movlw	low __pbssBANK0
   613     001F  0084               	movwf	4
   614     0020  3000               	movlw	high __pbssBANK0
   615     0021  0085               	movwf	5
   616     0022  3007               	movlw	7
   617     0023  3187  279C  3180   	fcall	clear_ram0
   618                           
   619                           ; Clear objects allocated to BANK1
   620     0026  30A0               	movlw	low __pbssBANK1
   621     0027  0084               	movwf	4
   622     0028  3000               	movlw	high __pbssBANK1
   623     0029  0085               	movwf	5
   624     002A  3048               	movlw	72
   625     002B  3187  279C  3180   	fcall	clear_ram0
   626     002E                     end_of_initialization:	
   627                           ;End of C runtime variable initialization code
   628                           
   629     002E                     __end_of__initialization:
   630     002E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   631     002F  0020               	movlb	0
   632     0030  3180  2832         	ljmp	_main	;jump to C main() function
   633                           
   634                           	psect	bssBANK0
   635     0061                     __pbssBANK0:
   636     0061                     _width:
   637     0061                     	ds	2
   638     0063                     _prec:
   639     0063                     	ds	2
   640     0065                     _i:
   641     0065                     	ds	2
   642     0067                     _flags:
   643     0067                     	ds	1
   644                           
   645                           	psect	bssBANK1
   646     00A0                     __pbssBANK1:
   647     00A0                     _dbuf:
   648     00A0                     	ds	32
   649     00C0                     _buffer2:
   650     00C0                     	ds	20
   651     00D4                     _buffer1:
   652     00D4                     	ds	20
   653                           
   654                           	psect	clrtext
   655     079C                     clear_ram0:	
   656                           ;	Called with FSR0 containing the base address, and
   657                           ;	WREG with the size to clear
   658                           
   659     079C  0064               	clrwdt	;clear the watchdog before getting into this loop
   660     079D                     clrloop0:
   661     079D  0180               	clrf	0	;clear RAM location pointed to by FSR
   662     079E  3101               	addfsr 0,1
   663     079F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   664     07A0  2F9D               	goto	clrloop0	;have we reached the end yet?
   665     07A1  3400               	retlw	0	;all done for this memory range, return
   666                           
   667                           	psect	cstackCOMMON
   668     0070                     __pcstackCOMMON:
   669     0070                     ?_Lcd_Cmd:
   670     0070                     ??_Lcd_Cmd:	
   671                           ; 1 bytes @ 0x0
   672                           
   673     0070                     ?_Lcd_Chr_CP:	
   674                           ; 1 bytes @ 0x0
   675                           
   676     0070                     ??_Lcd_Chr_CP:	
   677                           ; 1 bytes @ 0x0
   678                           
   679     0070                     ?_putch:	
   680                           ; 1 bytes @ 0x0
   681                           
   682     0070                     ??_putch:	
   683                           ; 1 bytes @ 0x0
   684                           
   685     0070                     ?_Lcd_Init:	
   686                           ; 1 bytes @ 0x0
   687                           
   688     0070                     ?_TMR0_Timer:	
   689                           ; 1 bytes @ 0x0
   690                           
   691     0070                     ??_TMR0_Timer:	
   692                           ; 1 bytes @ 0x0
   693                           
   694     0070                     ?_ISR_TIMER0:	
   695                           ; 1 bytes @ 0x0
   696                           
   697     0070                     ??_ISR_TIMER0:	
   698                           ; 1 bytes @ 0x0
   699                           
   700     0070                     ?_main:	
   701                           ; 1 bytes @ 0x0
   702                           
   703     0070                     ?_fputc:	
   704                           ; 1 bytes @ 0x0
   705                           
   706     0070                     ?___wmul:	
   707                           ; 2 bytes @ 0x0
   708                           
   709     0070                     ?___awdiv:	
   710                           ; 2 bytes @ 0x0
   711                           
   712     0070                     ?___awmod:	
   713                           ; 2 bytes @ 0x0
   714                           
   715     0070                     putch@c:	
   716                           ; 2 bytes @ 0x0
   717                           
   718     0070                     ___wmul@multiplier:	
   719                           ; 1 bytes @ 0x0
   720                           
   721     0070                     ___awdiv@divisor:	
   722                           ; 2 bytes @ 0x0
   723                           
   724     0070                     ___awmod@divisor:	
   725                           ; 2 bytes @ 0x0
   726                           
   727     0070                     fputc@c:	
   728                           ; 2 bytes @ 0x0
   729                           
   730                           
   731                           ; 2 bytes @ 0x0
   732     0070                     	ds	2
   733     0072                     Lcd_Chr_CP@data:
   734     0072                     Lcd_Cmd@data:	
   735                           ; 1 bytes @ 0x2
   736                           
   737     0072                     fputc@fp:	
   738                           ; 1 bytes @ 0x2
   739                           
   740     0072                     ___wmul@multiplicand:	
   741                           ; 1 bytes @ 0x2
   742                           
   743     0072                     ___awdiv@dividend:	
   744                           ; 2 bytes @ 0x2
   745                           
   746     0072                     ___awmod@dividend:	
   747                           ; 2 bytes @ 0x2
   748                           
   749                           
   750                           ; 2 bytes @ 0x2
   751     0072                     	ds	1
   752     0073                     ??_fputc:
   753     0073                     ??_Lcd_Init:	
   754                           ; 1 bytes @ 0x3
   755                           
   756     0073                     ?_Lcd_Out:	
   757                           ; 1 bytes @ 0x3
   758                           
   759     0073                     ?_Lcd_Out2:	
   760                           ; 1 bytes @ 0x3
   761                           
   762     0073                     Lcd_Out@x:	
   763                           ; 1 bytes @ 0x3
   764                           
   765     0073                     Lcd_Out2@x:	
   766                           ; 1 bytes @ 0x3
   767                           
   768                           
   769                           ; 1 bytes @ 0x3
   770     0073                     	ds	1
   771     0074                     ??___wmul:
   772     0074                     ??___awdiv:	
   773                           ; 1 bytes @ 0x4
   774                           
   775     0074                     ??___awmod:	
   776                           ; 1 bytes @ 0x4
   777                           
   778     0074                     Lcd_Init@data:	
   779                           ; 1 bytes @ 0x4
   780                           
   781     0074                     Lcd_Out@buffer:	
   782                           ; 1 bytes @ 0x4
   783                           
   784     0074                     Lcd_Out2@buffer:	
   785                           ; 2 bytes @ 0x4
   786                           
   787     0074                     ___wmul@product:	
   788                           ; 2 bytes @ 0x4
   789                           
   790                           
   791                           ; 2 bytes @ 0x4
   792     0074                     	ds	1
   793     0075                     ___awdiv@counter:
   794     0075                     ___awmod@counter:	
   795                           ; 1 bytes @ 0x5
   796                           
   797                           
   798                           ; 1 bytes @ 0x5
   799     0075                     	ds	1
   800     0076                     ??_Lcd_Out:
   801     0076                     ??_Lcd_Out2:	
   802                           ; 1 bytes @ 0x6
   803                           
   804     0076                     ?_read_prec_or_width:	
   805                           ; 1 bytes @ 0x6
   806                           
   807     0076                     ___awdiv@sign:	
   808                           ; 2 bytes @ 0x6
   809                           
   810     0076                     ___awmod@sign:	
   811                           ; 1 bytes @ 0x6
   812                           
   813     0076                     read_prec_or_width@ap:	
   814                           ; 1 bytes @ 0x6
   815                           
   816                           
   817                           ; 1 bytes @ 0x6
   818     0076                     	ds	1
   819     0077                     ?_abs:
   820     0077                     ___awdiv@quotient:	
   821                           ; 2 bytes @ 0x7
   822                           
   823     0077                     abs@a:	
   824                           ; 2 bytes @ 0x7
   825                           
   826                           
   827                           ; 2 bytes @ 0x7
   828     0077                     	ds	1
   829     0078                     ??_read_prec_or_width:
   830     0078                     ?_fputs:	
   831                           ; 1 bytes @ 0x8
   832                           
   833     0078                     Lcd_Out@y:	
   834                           ; 2 bytes @ 0x8
   835                           
   836     0078                     Lcd_Out2@y:	
   837                           ; 1 bytes @ 0x8
   838                           
   839     0078                     fputs@fp:	
   840                           ; 1 bytes @ 0x8
   841                           
   842                           
   843                           ; 1 bytes @ 0x8
   844     0078                     	ds	1
   845     0079                     ??_fputs:
   846     0079                     ??_abs:	
   847                           ; 1 bytes @ 0x9
   848                           
   849     0079                     Lcd_Out@data:	
   850                           ; 1 bytes @ 0x9
   851                           
   852     0079                     Lcd_Out2@data:	
   853                           ; 1 bytes @ 0x9
   854                           
   855                           
   856                           ; 1 bytes @ 0x9
   857     0079                     	ds	2
   858     007B                     ?_pad:
   859     007B                     pad@buf:	
   860                           ; 1 bytes @ 0xB
   861                           
   862                           
   863                           ; 1 bytes @ 0xB
   864     007B                     	ds	1
   865     007C                     pad@p:
   866                           
   867                           ; 2 bytes @ 0xC
   868     007C                     	ds	2
   869                           
   870                           	psect	cstackBANK0
   871     0020                     __pcstackBANK0:
   872     0020                     read_prec_or_width@c:
   873     0020                     fputs@c:	
   874                           ; 1 bytes @ 0x0
   875                           
   876                           
   877                           ; 1 bytes @ 0x0
   878     0020                     	ds	1
   879     0021                     read_prec_or_width@n:
   880     0021                     fputs@i:	
   881                           ; 2 bytes @ 0x1
   882                           
   883                           
   884                           ; 2 bytes @ 0x1
   885     0021                     	ds	2
   886     0023                     read_prec_or_width@fmt:
   887     0023                     fputs@s:	
   888                           ; 1 bytes @ 0x3
   889                           
   890                           
   891                           ; 1 bytes @ 0x3
   892     0023                     	ds	1
   893     0024                     ??_pad:
   894                           
   895                           ; 1 bytes @ 0x4
   896     0024                     	ds	1
   897     0025                     pad@i:
   898                           
   899                           ; 2 bytes @ 0x5
   900     0025                     	ds	2
   901     0027                     pad@w:
   902                           
   903                           ; 2 bytes @ 0x7
   904     0027                     	ds	2
   905     0029                     pad@fp:
   906                           
   907                           ; 1 bytes @ 0x9
   908     0029                     	ds	1
   909     002A                     ?_dtoa:
   910     002A                     dtoa@d:	
   911                           ; 1 bytes @ 0xA
   912                           
   913                           
   914                           ; 2 bytes @ 0xA
   915     002A                     	ds	2
   916     002C                     ??_dtoa:
   917                           
   918                           ; 1 bytes @ 0xC
   919     002C                     	ds	1
   920     002D                     _dtoa$647:
   921                           
   922                           ; 2 bytes @ 0xD
   923     002D                     	ds	2
   924     002F                     dtoa@fp:
   925                           
   926                           ; 1 bytes @ 0xF
   927     002F                     	ds	1
   928     0030                     dtoa@p:
   929                           
   930                           ; 2 bytes @ 0x10
   931     0030                     	ds	2
   932     0032                     dtoa@w:
   933                           
   934                           ; 2 bytes @ 0x12
   935     0032                     	ds	2
   936     0034                     dtoa@i:
   937                           
   938                           ; 2 bytes @ 0x14
   939     0034                     	ds	2
   940     0036                     dtoa@s:
   941                           
   942                           ; 1 bytes @ 0x16
   943     0036                     	ds	1
   944     0037                     ?_vfpfcnvrt:
   945     0037                     vfpfcnvrt@fmt:	
   946                           ; 1 bytes @ 0x17
   947                           
   948                           
   949                           ; 1 bytes @ 0x17
   950     0037                     	ds	1
   951     0038                     vfpfcnvrt@ap:
   952                           
   953                           ; 1 bytes @ 0x18
   954     0038                     	ds	1
   955     0039                     ??_vfpfcnvrt:
   956                           
   957                           ; 1 bytes @ 0x19
   958     0039                     	ds	4
   959     003D                     vfpfcnvrt@convarg:
   960                           
   961                           ; 4 bytes @ 0x1D
   962     003D                     	ds	4
   963     0041                     vfpfcnvrt@done:
   964                           
   965                           ; 2 bytes @ 0x21
   966     0041                     	ds	2
   967     0043                     vfpfcnvrt@fp:
   968                           
   969                           ; 1 bytes @ 0x23
   970     0043                     	ds	1
   971     0044                     vfpfcnvrt@cp:
   972                           
   973                           ; 2 bytes @ 0x24
   974     0044                     	ds	2
   975     0046                     ?_vfprintf:
   976     0046                     vfprintf@fmt:	
   977                           ; 2 bytes @ 0x26
   978                           
   979                           
   980                           ; 2 bytes @ 0x26
   981     0046                     	ds	2
   982     0048                     vfprintf@ap:
   983                           
   984                           ; 1 bytes @ 0x28
   985     0048                     	ds	1
   986     0049                     ??_vfprintf:
   987                           
   988                           ; 1 bytes @ 0x29
   989     0049                     	ds	1
   990     004A                     vfprintf@fp:
   991                           
   992                           ; 1 bytes @ 0x2A
   993     004A                     	ds	1
   994     004B                     vfprintf@cfmt:
   995                           
   996                           ; 2 bytes @ 0x2B
   997     004B                     	ds	2
   998     004D                     ?_sprintf:
   999     004D                     sprintf@fmt:	
  1000                           ; 2 bytes @ 0x2D
  1001                           
  1002                           
  1003                           ; 2 bytes @ 0x2D
  1004     004D                     	ds	4
  1005     0051                     ??_sprintf:
  1006                           
  1007                           ; 1 bytes @ 0x31
  1008     0051                     	ds	1
  1009     0052                     sprintf@ap:
  1010                           
  1011                           ; 1 bytes @ 0x32
  1012     0052                     	ds	1
  1013     0053                     sprintf@s:
  1014                           
  1015                           ; 1 bytes @ 0x33
  1016     0053                     	ds	1
  1017     0054                     sprintf@f:
  1018                           
  1019                           ; 11 bytes @ 0x34
  1020     0054                     	ds	11
  1021     005F                     ??_main:
  1022                           
  1023                           ; 1 bytes @ 0x3F
  1024     005F                     	ds	2
  1025                           
  1026                           	psect	maintext
  1027     0032                     __pmaintext:	
  1028 ;;
  1029 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1030 ;;
  1031 ;; *************** function _main *****************
  1032 ;; Defined at:
  1033 ;;		line 38 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  1    wreg      void 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : B1F/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1051 ;;Total ram usage:        2 bytes
  1052 ;; Hardware stack levels required when called: 9
  1053 ;; This function calls:
  1054 ;;		_Lcd_Cmd
  1055 ;;		_Lcd_Init
  1056 ;;		_Lcd_Out
  1057 ;;		_Lcd_Out2
  1058 ;;		_TMR0_Timer
  1059 ;;		_sprintf
  1060 ;; This function is called by:
  1061 ;;		Startup code after reset
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065     0032                     _main:	
  1066                           ;psect for function _main
  1067                           
  1068     0032                     l1793:	
  1069                           ;incstack = 0
  1070                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1071                           
  1072                           
  1073                           ;main.c: 40:     PORTA = 0;
  1074     0032  0021               	movlb	1	; select bank1
  1075     0033  0819               	movf	25,w	;volatile
  1076     0034  3987               	andlw	-121
  1077     0035  3868               	iorlw	104
  1078     0036  0099               	movwf	25	;volatile
  1079                           
  1080                           ;main.c: 41:     PORTB = 0;
  1081     0037  30FC               	movlw	-4
  1082     0038  0599               	andwf	25,f	;volatile
  1083     0039                     l1795:
  1084                           
  1085                           ;main.c: 42:     PORTC = 0;
  1086     0039  0198               	clrf	24	;volatile
  1087     003A                     l1797:
  1088                           
  1089                           ;main.c: 45:     INTCONbits.GIE = 1;
  1090     003A  0023               	movlb	3	; select bank3
  1091     003B  018C               	clrf	12	;volatile
  1092     003C                     l1799:
  1093                           
  1094                           ;main.c: 46:     INTCONbits.T0IF = 0;
  1095     003C  018D               	clrf	13	;volatile
  1096     003D                     l1801:
  1097                           
  1098                           ;main.c: 47:     INTCONbits.TMR0IE = 1;
  1099     003D  018E               	clrf	14	;volatile
  1100     003E                     l1803:
  1101                           
  1102                           ;main.c: 48:     TMR0_Timer();
  1103     003E  0021               	movlb	1	; select bank1
  1104     003F  018C               	clrf	12	;volatile
  1105     0040                     l1805:
  1106                           
  1107                           ;main.c: 49: 
  1108     0040  018D               	clrf	13	;volatile
  1109     0041                     l1807:
  1110                           
  1111                           ;main.c: 50: 
  1112     0041  018E               	clrf	14	;volatile
  1113     0042                     l1809:
  1114                           
  1115                           ;main.c: 53: 
  1116     0042  0020               	movlb	0	; select bank0
  1117     0043  018C               	clrf	12	;volatile
  1118     0044                     l1811:
  1119                           
  1120                           ;main.c: 54: 
  1121     0044  018D               	clrf	13	;volatile
  1122     0045                     l1813:
  1123                           
  1124                           ;main.c: 55: 
  1125     0045  018E               	clrf	14	;volatile
  1126     0046                     l1815:
  1127                           
  1128                           ;main.c: 58:     Lcd_Cmd(12);
  1129     0046  178B               	bsf	11,7	;volatile
  1130     0047                     l1817:
  1131                           
  1132                           ;main.c: 59:     _delay((unsigned long)((100)*(4000000/4000.0)));
  1133     0047  110B               	bcf	11,2	;volatile
  1134     0048                     l1819:
  1135                           
  1136                           ;main.c: 60: 
  1137     0048  168B               	bsf	11,5	;volatile
  1138     0049                     l1821:
  1139                           
  1140                           ;main.c: 61: 
  1141     0049  3187  2786  3180   	fcall	_TMR0_Timer
  1142     004C                     l1823:
  1143                           
  1144                           ;main.c: 69: 
  1145     004C  3182  22DF  3180   	fcall	_Lcd_Init
  1146     004F                     l1825:
  1147                           
  1148                           ;main.c: 70: 
  1149     004F  3001               	movlw	1
  1150     0050  3184  240E  3180   	fcall	_Lcd_Cmd
  1151     0053                     l1827:
  1152                           
  1153                           ;main.c: 71:         for(i=10; i>0; i--){
  1154     0053  300C               	movlw	12
  1155     0054  3184  240E  3180   	fcall	_Lcd_Cmd
  1156     0057                     l1829:
  1157                           
  1158                           ;main.c: 72:             sprintf((char *)buffer1,"Cuenta %03d", i);
  1159     0057  3082               	movlw	130
  1160     0058  0020               	movlb	0	; select bank0
  1161     0059  00DF               	movwf	??_main
  1162     005A  30DD               	movlw	221
  1163     005B                     u1447:
  1164     005B  0B89               	decfsz	9,f
  1165     005C  285B               	goto	u1447
  1166     005D  0BDF               	decfsz	??_main,f
  1167     005E  285B               	goto	u1447
  1168     005F  3200               	nop2
  1169     0060                     l1831:
  1170                           
  1171                           ;main.c: 77:         _delay((unsigned long)((600)*(4000000/4000.0)));
  1172     0060  3070               	movlw	low (STR_1| (0+32768))
  1173     0061  0020               	movlb	0	; select bank0
  1174     0062  00CD               	movwf	sprintf@fmt
  1175     0063  3087               	movlw	high (STR_1| (0+32768))
  1176     0064  00CE               	movwf	sprintf@fmt+1
  1177     0065  3005               	movlw	5
  1178     0066  00CF               	movwf	?_sprintf+2
  1179     0067  3000               	movlw	0
  1180     0068  00D0               	movwf	?_sprintf+3
  1181     0069  30D4               	movlw	(low (_buffer1| 0))& (0+255)
  1182     006A  3187  2711  3180   	fcall	_sprintf
  1183     006D                     l1833:
  1184                           
  1185                           ;main.c: 78:         Lcd_Cmd(15);
  1186     006D  307C               	movlw	low (STR_2| (0+32768))
  1187     006E  0020               	movlb	0	; select bank0
  1188     006F  00CD               	movwf	sprintf@fmt
  1189     0070  3087               	movlw	high (STR_2| (0+32768))
  1190     0071  00CE               	movwf	sprintf@fmt+1
  1191     0072  30DE               	movlw	222
  1192     0073  00CF               	movwf	?_sprintf+2
  1193     0074  3000               	movlw	0
  1194     0075  00D0               	movwf	?_sprintf+3
  1195     0076  30C0               	movlw	(low (_buffer2| 0))& (0+255)
  1196     0077  3187  2711  3180   	fcall	_sprintf
  1197     007A                     l1835:
  1198                           
  1199                           ;main.c: 79:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  1200     007A  01F3               	clrf	Lcd_Out2@x
  1201     007B  0AF3               	incf	Lcd_Out2@x,f
  1202     007C  30D4               	movlw	low _buffer1
  1203     007D  00F4               	movwf	Lcd_Out2@buffer
  1204     007E  3000               	movlw	high _buffer1
  1205     007F  00F5               	movwf	Lcd_Out2@buffer+1
  1206     0080  3001               	movlw	1
  1207     0081  3186  2648  3180   	fcall	_Lcd_Out2
  1208     0084                     l1837:
  1209                           
  1210                           ;main.c: 80:         Lcd_Cmd(14);
  1211     0084  01F3               	clrf	Lcd_Out2@x
  1212     0085  0AF3               	incf	Lcd_Out2@x,f
  1213     0086  30C0               	movlw	low _buffer2
  1214     0087  00F4               	movwf	Lcd_Out2@buffer
  1215     0088  3000               	movlw	high _buffer2
  1216     0089  00F5               	movwf	Lcd_Out2@buffer+1
  1217     008A  3002               	movlw	2
  1218     008B  3186  2648  3180   	fcall	_Lcd_Out2
  1219     008E                     l1839:
  1220                           
  1221                           ;main.c: 81:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  1222     008E  3082               	movlw	130
  1223     008F  0020               	movlb	0	; select bank0
  1224     0090  00DF               	movwf	??_main
  1225     0091  30DD               	movlw	221
  1226     0092                     u1457:
  1227     0092  0B89               	decfsz	9,f
  1228     0093  2892               	goto	u1457
  1229     0094  0BDF               	decfsz	??_main,f
  1230     0095  2892               	goto	u1457
  1231     0096  3200               	nop2
  1232     0097                     l1841:
  1233                           
  1234                           ;main.c: 84:         Lcd_Cmd(1);
  1235     0097  300A               	movlw	10
  1236     0098  0020               	movlb	0	; select bank0
  1237     0099  00E5               	movwf	_i
  1238     009A  3000               	movlw	0
  1239     009B  00E6               	movwf	_i+1
  1240     009C                     l1847:
  1241                           
  1242                           ;main.c: 85:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  1243     009C  3070               	movlw	low (STR_1| (0+32768))
  1244     009D  0020               	movlb	0	; select bank0
  1245     009E  00CD               	movwf	sprintf@fmt
  1246     009F  3087               	movlw	high (STR_1| (0+32768))
  1247     00A0  00CE               	movwf	sprintf@fmt+1
  1248     00A1  0866               	movf	_i+1,w
  1249     00A2  00D0               	movwf	?_sprintf+3
  1250     00A3  0865               	movf	_i,w
  1251     00A4  00CF               	movwf	?_sprintf+2
  1252     00A5  30D4               	movlw	(low (_buffer1| 0))& (0+255)
  1253     00A6  3187  2711  3180   	fcall	_sprintf
  1254     00A9                     l1849:
  1255                           
  1256                           ;main.c: 86:         Lcd_Out(1, 4, "Thanks");
  1257     00A9  01F3               	clrf	Lcd_Out2@x
  1258     00AA  0AF3               	incf	Lcd_Out2@x,f
  1259     00AB  30D4               	movlw	low _buffer1
  1260     00AC  00F4               	movwf	Lcd_Out2@buffer
  1261     00AD  3000               	movlw	high _buffer1
  1262     00AE  00F5               	movwf	Lcd_Out2@buffer+1
  1263     00AF  3001               	movlw	1
  1264     00B0  3186  2648  3180   	fcall	_Lcd_Out2
  1265     00B3                     l1851:
  1266                           
  1267                           ;main.c: 87:         Lcd_Out(2, 4, "Thank");
  1268     00B3  3082               	movlw	130
  1269     00B4  0020               	movlb	0	; select bank0
  1270     00B5  00DF               	movwf	??_main
  1271     00B6  30DD               	movlw	221
  1272     00B7                     u1467:
  1273     00B7  0B89               	decfsz	9,f
  1274     00B8  28B7               	goto	u1467
  1275     00B9  0BDF               	decfsz	??_main,f
  1276     00BA  28B7               	goto	u1467
  1277     00BB  3200               	nop2
  1278     00BC                     l1853:
  1279                           
  1280                           ;main.c: 88:         }
  1281     00BC  30FF               	movlw	255
  1282     00BD  0020               	movlb	0	; select bank0
  1283     00BE  07E5               	addwf	_i,f
  1284     00BF  30FF               	movlw	255
  1285     00C0  3DE6               	addwfc	_i+1,f
  1286     00C1                     l1855:
  1287     00C1  0866               	movf	_i+1,w
  1288     00C2  3A80               	xorlw	128
  1289     00C3  00DF               	movwf	??_main
  1290     00C4  3080               	movlw	128
  1291     00C5  025F               	subwf	??_main,w
  1292     00C6  1D03               	skipz
  1293     00C7  28CA               	goto	u1435
  1294     00C8  3001               	movlw	1
  1295     00C9  0265               	subwf	_i,w
  1296     00CA                     u1435:
  1297     00CA  1803               	skipnc
  1298     00CB  28CD               	goto	u1431
  1299     00CC  28CE               	goto	u1430
  1300     00CD                     u1431:
  1301     00CD  289C               	goto	l1847
  1302     00CE                     u1430:
  1303     00CE                     l1857:
  1304                           
  1305                           ;main.c: 89:  return;
  1306     00CE  01F3               	clrf	Lcd_Out2@x
  1307     00CF  0AF3               	incf	Lcd_Out2@x,f
  1308     00D0  3064               	movlw	low (STR_4| (0+32768))
  1309     00D1  00F4               	movwf	Lcd_Out2@buffer
  1310     00D2  3087               	movlw	high (STR_4| (0+32768))
  1311     00D3  00F5               	movwf	Lcd_Out2@buffer+1
  1312     00D4  3002               	movlw	2
  1313     00D5  3186  2648  3180   	fcall	_Lcd_Out2
  1314     00D8                     l1859:
  1315                           
  1316                           ;main.c: 90: }
  1317     00D8  3004               	movlw	4
  1318     00D9  0020               	movlb	0	; select bank0
  1319     00DA  00E0               	movwf	??_main+1
  1320     00DB  300C               	movlw	12
  1321     00DC  00DF               	movwf	??_main
  1322     00DD  3033               	movlw	51
  1323     00DE                     u1477:
  1324     00DE  0B89               	decfsz	9,f
  1325     00DF  28DE               	goto	u1477
  1326     00E0  0BDF               	decfsz	??_main,f
  1327     00E1  28DE               	goto	u1477
  1328     00E2  0BE0               	decfsz	??_main+1,f
  1329     00E3  28DE               	goto	u1477
  1330     00E4  3200               	nop2
  1331     00E5                     l1861:
  1332     00E5  300F               	movlw	15
  1333     00E6  3184  240E  3180   	fcall	_Lcd_Cmd
  1334     00E9                     l1863:
  1335     00E9  3006               	movlw	6
  1336     00EA  0020               	movlb	0	; select bank0
  1337     00EB  00E0               	movwf	??_main+1
  1338     00EC  3013               	movlw	19
  1339     00ED  00DF               	movwf	??_main
  1340     00EE  30AD               	movlw	173
  1341     00EF                     u1487:
  1342     00EF  0B89               	decfsz	9,f
  1343     00F0  28EF               	goto	u1487
  1344     00F1  0BDF               	decfsz	??_main,f
  1345     00F2  28EF               	goto	u1487
  1346     00F3  0BE0               	decfsz	??_main+1,f
  1347     00F4  28EF               	goto	u1487
  1348     00F5  3200               	nop2
  1349     00F6                     l1865:
  1350     00F6  300E               	movlw	14
  1351     00F7  3184  240E  3180   	fcall	_Lcd_Cmd
  1352     00FA                     l1867:
  1353     00FA  3006               	movlw	6
  1354     00FB  0020               	movlb	0	; select bank0
  1355     00FC  00E0               	movwf	??_main+1
  1356     00FD  3013               	movlw	19
  1357     00FE  00DF               	movwf	??_main
  1358     00FF  30AD               	movlw	173
  1359     0100                     u1497:
  1360     0100  0B89               	decfsz	9,f
  1361     0101  2900               	goto	u1497
  1362     0102  0BDF               	decfsz	??_main,f
  1363     0103  2900               	goto	u1497
  1364     0104  0BE0               	decfsz	??_main+1,f
  1365     0105  2900               	goto	u1497
  1366     0106  3200               	nop2
  1367     0107                     l1869:
  1368     0107  300C               	movlw	12
  1369     0108  3184  240E  3180   	fcall	_Lcd_Cmd
  1370     010B                     l1871:
  1371     010B  3006               	movlw	6
  1372     010C  0020               	movlb	0	; select bank0
  1373     010D  00E0               	movwf	??_main+1
  1374     010E  3013               	movlw	19
  1375     010F  00DF               	movwf	??_main
  1376     0110  30AD               	movlw	173
  1377     0111                     u1507:
  1378     0111  0B89               	decfsz	9,f
  1379     0112  2911               	goto	u1507
  1380     0113  0BDF               	decfsz	??_main,f
  1381     0114  2911               	goto	u1507
  1382     0115  0BE0               	decfsz	??_main+1,f
  1383     0116  2911               	goto	u1507
  1384     0117  3200               	nop2
  1385     0118                     l1873:
  1386     0118  3001               	movlw	1
  1387     0119  3184  240E  3180   	fcall	_Lcd_Cmd
  1388     011C                     l1875:
  1389     011C  3006               	movlw	6
  1390     011D  0020               	movlb	0	; select bank0
  1391     011E  00E0               	movwf	??_main+1
  1392     011F  3013               	movlw	19
  1393     0120  00DF               	movwf	??_main
  1394     0121  30AD               	movlw	173
  1395     0122                     u1517:
  1396     0122  0B89               	decfsz	9,f
  1397     0123  2922               	goto	u1517
  1398     0124  0BDF               	decfsz	??_main,f
  1399     0125  2922               	goto	u1517
  1400     0126  0BE0               	decfsz	??_main+1,f
  1401     0127  2922               	goto	u1517
  1402     0128  3200               	nop2
  1403     0129                     l1877:
  1404     0129  3004               	movlw	4
  1405     012A  00F3               	movwf	Lcd_Out@x
  1406     012B  308F               	movlw	low (STR_5| (0+32768))
  1407     012C  00F4               	movwf	Lcd_Out@buffer
  1408     012D  3087               	movlw	high (STR_5| (0+32768))
  1409     012E  00F5               	movwf	Lcd_Out@buffer+1
  1410     012F  3001               	movlw	1
  1411     0130  3186  268B  3180   	fcall	_Lcd_Out
  1412     0133                     l1879:
  1413     0133  3004               	movlw	4
  1414     0134  00F3               	movwf	Lcd_Out@x
  1415     0135  3096               	movlw	low (STR_6| (0+32768))
  1416     0136  00F4               	movwf	Lcd_Out@buffer
  1417     0137  3087               	movlw	high (STR_6| (0+32768))
  1418     0138  00F5               	movwf	Lcd_Out@buffer+1
  1419     0139  3002               	movlw	2
  1420     013A  3186  268B  3180   	fcall	_Lcd_Out
  1421     013D  2860               	goto	l1831
  1422     013E  3180  281C         	ljmp	start
  1423     0140                     __end_of_main:
  1424                           
  1425                           	psect	text1
  1426     0711                     __ptext1:	
  1427 ;; *************** function _sprintf *****************
  1428 ;; Defined at:
  1429 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_sprintf.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  s               1    wreg     PTR unsigned char 
  1432 ;;		 -> buffer2(20), buffer1(20), 
  1433 ;;  fmt             2   45[BANK0 ] PTR const unsigned char 
  1434 ;;		 -> STR_3(12), STR_2(10), STR_1(12), 
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  s               1   51[BANK0 ] PTR unsigned char 
  1437 ;;		 -> buffer2(20), buffer1(20), 
  1438 ;;  f              11   52[BANK0 ] struct _IO_FILE
  1439 ;;  ret             2    0        int 
  1440 ;;  ap              1   50[BANK0 ] PTR void [1]
  1441 ;;		 -> ?_sprintf(2), 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  2   45[BANK0 ] int 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1451 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1452 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1454 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1455 ;;Total ram usage:       18 bytes
  1456 ;; Hardware stack levels used: 1
  1457 ;; Hardware stack levels required when called: 8
  1458 ;; This function calls:
  1459 ;;		_vfprintf
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465     0711                     _sprintf:	
  1466                           ;psect for function _sprintf
  1467                           
  1468                           
  1469                           ;incstack = 0
  1470                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1471                           ;sprintf@s stored from wreg
  1472     0711  0020               	movlb	0	; select bank0
  1473     0712  00D3               	movwf	sprintf@s
  1474     0713                     l1781:
  1475     0713  304F               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1476     0714  00D2               	movwf	sprintf@ap
  1477     0715  0853               	movf	sprintf@s,w
  1478     0716  00D4               	movwf	sprintf@f
  1479     0717                     l1783:
  1480     0717  01D6               	clrf	sprintf@f+2
  1481     0718  01D7               	clrf	sprintf@f+3
  1482     0719                     l1785:
  1483     0719  01DD               	clrf	sprintf@f+9
  1484     071A  01DE               	clrf	sprintf@f+10
  1485     071B                     l1787:
  1486     071B  084E               	movf	sprintf@fmt+1,w
  1487     071C  00C7               	movwf	vfprintf@fmt+1
  1488     071D  084D               	movf	sprintf@fmt,w
  1489     071E  00C6               	movwf	vfprintf@fmt
  1490     071F  3052               	movlw	(low (sprintf@ap| 0))& (0+255)
  1491     0720  00C8               	movwf	vfprintf@ap
  1492     0721  3054               	movlw	(low (sprintf@f| 0))& (0+255)
  1493     0722  3187  272E  3187   	fcall	_vfprintf
  1494     0725                     l1789:
  1495     0725  0020               	movlb	0	; select bank0
  1496     0726  0856               	movf	sprintf@f+2,w
  1497     0727  0753               	addwf	sprintf@s,w
  1498     0728  00D1               	movwf	??_sprintf
  1499     0729  0851               	movf	??_sprintf,w
  1500     072A  0086               	movwf	6
  1501     072B  0187               	clrf	7
  1502     072C  0181               	clrf	1
  1503     072D                     l640:
  1504     072D  0008               	return
  1505     072E                     __end_of_sprintf:
  1506                           
  1507                           	psect	text2
  1508     072E                     __ptext2:	
  1509 ;; *************** function _vfprintf *****************
  1510 ;; Defined at:
  1511 ;;		line 1546 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  fp              1    wreg     PTR struct _IO_FILE
  1514 ;;		 -> sprintf@f(11), 
  1515 ;;  fmt             2   38[BANK0 ] PTR const unsigned char 
  1516 ;;		 -> STR_3(12), STR_2(10), STR_1(12), 
  1517 ;;  ap              1   40[BANK0 ] PTR PTR void 
  1518 ;;		 -> sprintf@ap(1), 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  fp              1   42[BANK0 ] PTR struct _IO_FILE
  1521 ;;		 -> sprintf@f(11), 
  1522 ;;  cfmt            2   43[BANK0 ] PTR unsigned char 
  1523 ;;		 -> STR_3(12), STR_2(10), STR_1(12), 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  2   38[BANK0 ] int 
  1526 ;; Registers used:
  1527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1533 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1534 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1535 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1536 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1537 ;;Total ram usage:        7 bytes
  1538 ;; Hardware stack levels used: 1
  1539 ;; Hardware stack levels required when called: 7
  1540 ;; This function calls:
  1541 ;;		_vfpfcnvrt
  1542 ;; This function is called by:
  1543 ;;		_sprintf
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547     072E                     _vfprintf:	
  1548                           ;psect for function _vfprintf
  1549                           
  1550                           
  1551                           ;incstack = 0
  1552                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1553                           ;vfprintf@fp stored from wreg
  1554     072E  0020               	movlb	0	; select bank0
  1555     072F  00CA               	movwf	vfprintf@fp
  1556     0730                     l1687:
  1557                           
  1558                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1546: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\source
      +                          s\c99\common\doprnt.c: 1547: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\comm
      +                          on\doprnt.c: 1549:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\
      +                          common\doprnt.c: 1551:     cfmt = (char *)fmt;
  1559     0730  0847               	movf	vfprintf@fmt+1,w
  1560     0731  00CC               	movwf	vfprintf@cfmt+1
  1561     0732  0846               	movf	vfprintf@fmt,w
  1562     0733  00CB               	movwf	vfprintf@cfmt
  1563                           
  1564                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
  1565     0734  2F3D               	goto	l1691
  1566     0735                     l1689:
  1567                           
  1568                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1559:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1569     0735  304B               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1570     0736  00B7               	movwf	vfpfcnvrt@fmt
  1571     0737  0848               	movf	vfprintf@ap,w
  1572     0738  00B8               	movwf	vfpfcnvrt@ap
  1573     0739  084A               	movf	vfprintf@fp,w
  1574     073A  3182  2214  3187   	fcall	_vfpfcnvrt
  1575     073D                     l1691:
  1576                           
  1577                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
  1578     073D  0020               	movlb	0	; select bank0
  1579     073E  084B               	movf	vfprintf@cfmt,w
  1580     073F  0084               	movwf	4
  1581     0740  084C               	movf	vfprintf@cfmt+1,w
  1582     0741  0085               	movwf	5
  1583     0742  0012               	moviw fsr0++
  1584     0743  1D03               	btfss	3,2
  1585     0744  2F46               	goto	u1391
  1586     0745  2F47               	goto	u1390
  1587     0746                     u1391:
  1588     0746  2F35               	goto	l1689
  1589     0747                     u1390:
  1590     0747                     l1693:
  1591                           
  1592                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1564:  return 0;
  1593     0747  01C6               	clrf	?_vfprintf
  1594     0748  01C7               	clrf	?_vfprintf+1
  1595     0749                     l719:
  1596     0749  0008               	return
  1597     074A                     __end_of_vfprintf:
  1598                           
  1599                           	psect	text3
  1600     0214                     __ptext3:	
  1601 ;; *************** function _vfpfcnvrt *****************
  1602 ;; Defined at:
  1603 ;;		line 1048 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  fp              1    wreg     PTR struct _IO_FILE
  1606 ;;		 -> sprintf@f(11), 
  1607 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
  1608 ;;		 -> vfprintf@cfmt(2), 
  1609 ;;  ap              1   24[BANK0 ] PTR PTR void 
  1610 ;;		 -> sprintf@ap(1), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  fp              1   35[BANK0 ] PTR struct _IO_FILE
  1613 ;;		 -> sprintf@f(11), 
  1614 ;;  convarg         4   29[BANK0 ] struct .
  1615 ;;  cp              2   36[BANK0 ] PTR unsigned char 
  1616 ;;		 -> STR_3(12), STR_2(10), STR_1(12), 
  1617 ;;  done            2   33[BANK0 ] int 
  1618 ;;  i               2    0        int 
  1619 ;;  c               1    0        unsigned char 
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1630 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1631 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1632 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1633 ;;Total ram usage:       15 bytes
  1634 ;; Hardware stack levels used: 1
  1635 ;; Hardware stack levels required when called: 6
  1636 ;; This function calls:
  1637 ;;		_dtoa
  1638 ;;		_fputc
  1639 ;;		_read_prec_or_width
  1640 ;; This function is called by:
  1641 ;;		_vfprintf
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645     0214                     _vfpfcnvrt:	
  1646                           ;psect for function _vfpfcnvrt
  1647                           
  1648                           
  1649                           ;incstack = 0
  1650                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1651                           ;vfpfcnvrt@fp stored from wreg
  1652     0214  0020               	movlb	0	; select bank0
  1653     0215  00C3               	movwf	vfpfcnvrt@fp
  1654     0216                     l1569:
  1655                           
  1656                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1048: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1049: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\dopr
      +                          nt.c: 1050:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common
      +                          \doprnt.c: 1051:     int done, i;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1059:  } convarg;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1062:     if ((*fmt)[0] == '%') {
  1657     0216  0837               	movf	vfpfcnvrt@fmt,w
  1658     0217  0086               	movwf	6
  1659     0218  0187               	clrf	7
  1660     0219  3F40               	moviw [0]fsr1
  1661     021A  00B9               	movwf	??_vfpfcnvrt
  1662     021B  3F41               	moviw [1]fsr1
  1663     021C  00BA               	movwf	??_vfpfcnvrt+1
  1664     021D  0839               	movf	??_vfpfcnvrt,w
  1665     021E  0084               	movwf	4
  1666     021F  083A               	movf	??_vfpfcnvrt+1,w
  1667     0220  0085               	movwf	5
  1668     0221  0012               	moviw fsr0++
  1669     0222  3A25               	xorlw	37
  1670     0223  1D03               	btfss	3,2
  1671     0224  2A26               	goto	u1221
  1672     0225  2A27               	goto	u1220
  1673     0226                     u1221:
  1674     0226  2AC6               	goto	l1615
  1675     0227                     u1220:
  1676     0227                     l1571:
  1677                           
  1678                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1063:         ++*
      +                          fmt;
  1679     0227  0837               	movf	vfpfcnvrt@fmt,w
  1680     0228  0086               	movwf	6
  1681     0229  0187               	clrf	7
  1682     022A  3001               	movlw	1
  1683     022B  0781               	addwf	1,f
  1684     022C  3141               	addfsr 1,1
  1685     022D  1803               	skipnc
  1686     022E  0A81               	incf	1,f
  1687     022F                     l1573:
  1688                           
  1689                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1065:         fla
      +                          gs = width = 0;
  1690     022F  01E1               	clrf	_width
  1691     0230  01E2               	clrf	_width+1
  1692     0231  1003               	clrc
  1693     0232  3000               	movlw	0
  1694     0233  1803               	btfsc	3,0
  1695     0234  3001               	movlw	1
  1696     0235  00E7               	movwf	_flags
  1697     0236                     l1575:
  1698                           
  1699                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1066:         pre
      +                          c = -1;
  1700     0236  30FF               	movlw	255
  1701     0237  00E3               	movwf	_prec
  1702     0238  30FF               	movlw	255
  1703     0239  00E4               	movwf	_prec+1
  1704     023A                     l1577:
  1705                           
  1706                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1070:         don
      +                          e = 0;
  1707     023A  01C1               	clrf	vfpfcnvrt@done
  1708     023B  01C2               	clrf	vfpfcnvrt@done+1
  1709                           
  1710                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1071:         whi
      +                          le (!done) {
  1711     023C  2A64               	goto	l1587
  1712     023D                     l705:	
  1713                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1080:            
      +                               case '0' :
  1714                           
  1715                           
  1716                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1081:            
      +                                   flags |= (1 << 1);
  1717     023D  14E7               	bsf	_flags,1
  1718     023E                     l1579:
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1082:            
      +                                   ++*fmt;
  1721     023E  0837               	movf	vfpfcnvrt@fmt,w
  1722     023F  0086               	movwf	6
  1723     0240  0187               	clrf	7
  1724     0241  3001               	movlw	1
  1725     0242  0781               	addwf	1,f
  1726     0243  3141               	addfsr 1,1
  1727     0244  1803               	skipnc
  1728     0245  0A81               	incf	1,f
  1729                           
  1730                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1083:            
      +                                   break;
  1731     0246  2A64               	goto	l1587
  1732     0247                     l1581:
  1733                           
  1734                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1104:            
      +                                   done = 1;
  1735     0247  3001               	movlw	1
  1736     0248  00C1               	movwf	vfpfcnvrt@done
  1737     0249  3000               	movlw	0
  1738     024A  00C2               	movwf	vfpfcnvrt@done+1
  1739                           
  1740                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1105:            
      +                                   break;
  1741     024B  2A64               	goto	l1587
  1742     024C                     l1585:
  1743     024C  0837               	movf	vfpfcnvrt@fmt,w
  1744     024D  0086               	movwf	6
  1745     024E  0187               	clrf	7
  1746     024F  3F40               	moviw [0]fsr1
  1747     0250  00B9               	movwf	??_vfpfcnvrt
  1748     0251  3F41               	moviw [1]fsr1
  1749     0252  00BA               	movwf	??_vfpfcnvrt+1
  1750     0253  0839               	movf	??_vfpfcnvrt,w
  1751     0254  0084               	movwf	4
  1752     0255  083A               	movf	??_vfpfcnvrt+1,w
  1753     0256  0085               	movwf	5
  1754     0257  0800               	movf	0,w	;code access
  1755     0258  00BB               	movwf	??_vfpfcnvrt+2
  1756     0259  01BC               	clrf	??_vfpfcnvrt+3
  1757                           
  1758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1759                           ; Switch size 1, requested type "simple"
  1760                           ; Number of cases is 1, Range of values is 0 to 0
  1761                           ; switch strategies available:
  1762                           ; Name         Instructions Cycles
  1763                           ; simple_byte            4     3 (average)
  1764                           ; direct_byte            8     6 (fixed)
  1765                           ; jumptable            260     6 (fixed)
  1766                           ;	Chosen strategy is simple_byte
  1767     025A  083C               	movf	??_vfpfcnvrt+3,w
  1768     025B  3A00               	xorlw	0	; case 0
  1769     025C  1903               	skipnz
  1770     025D  2A5F               	goto	l1941
  1771     025E  2A47               	goto	l1581
  1772     025F                     l1941:
  1773                           
  1774                           ; Switch size 1, requested type "simple"
  1775                           ; Number of cases is 1, Range of values is 48 to 48
  1776                           ; switch strategies available:
  1777                           ; Name         Instructions Cycles
  1778                           ; simple_byte            4     3 (average)
  1779                           ; direct_byte           11     9 (fixed)
  1780                           ; jumptable            263     9 (fixed)
  1781                           ;	Chosen strategy is simple_byte
  1782     025F  083B               	movf	??_vfpfcnvrt+2,w
  1783     0260  3A30               	xorlw	48	; case 48
  1784     0261  1903               	skipnz
  1785     0262  2A3D               	goto	l705
  1786     0263  2A47               	goto	l1581
  1787     0264                     l1587:
  1788                           
  1789                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1071:         whi
      +                          le (!done) {
  1790     0264  0841               	movf	vfpfcnvrt@done,w
  1791     0265  0442               	iorwf	vfpfcnvrt@done+1,w
  1792     0266  1903               	btfsc	3,2
  1793     0267  2A69               	goto	u1231
  1794     0268  2A6A               	goto	u1230
  1795     0269                     u1231:
  1796     0269  2A4C               	goto	l1585
  1797     026A                     u1230:
  1798     026A                     l1589:
  1799                           
  1800                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1117:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1801     026A  0838               	movf	vfpfcnvrt@ap,w
  1802     026B  00F6               	movwf	read_prec_or_width@ap
  1803     026C  0837               	movf	vfpfcnvrt@fmt,w
  1804     026D  3184  24A1  3182   	fcall	_read_prec_or_width
  1805     0270  0877               	movf	?_read_prec_or_width+1,w
  1806     0271  0020               	movlb	0	; select bank0
  1807     0272  00E2               	movwf	_width+1
  1808     0273  0876               	movf	?_read_prec_or_width,w
  1809     0274  00E1               	movwf	_width
  1810     0275                     l1591:
  1811                           
  1812                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1118:   if (width
      +                           < 0) {
  1813     0275  1FE2               	btfss	_width+1,7
  1814     0276  2A78               	goto	u1241
  1815     0277  2A79               	goto	u1240
  1816     0278                     u1241:
  1817     0278  2A7F               	goto	l1597
  1818     0279                     u1240:
  1819     0279                     l1593:
  1820                           
  1821                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1119:    flags |=
      +                           (1 << 0);
  1822     0279  1467               	bsf	_flags,0
  1823     027A                     l1595:
  1824                           
  1825                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1120:    width = 
      +                          -width;
  1826     027A  09E1               	comf	_width,f
  1827     027B  09E2               	comf	_width+1,f
  1828     027C  0AE1               	incf	_width,f
  1829     027D  1903               	skipnz
  1830     027E  0AE2               	incf	_width+1,f
  1831     027F                     l1597:
  1832                           
  1833                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1143:   cp = *fmt
      +                          ;
  1834     027F  0837               	movf	vfpfcnvrt@fmt,w
  1835     0280  0086               	movwf	6
  1836     0281  0187               	clrf	7
  1837     0282  3F40               	moviw [0]fsr1
  1838     0283  00C4               	movwf	vfpfcnvrt@cp
  1839     0284  3F41               	moviw [1]fsr1
  1840     0285  00C5               	movwf	vfpfcnvrt@cp+1
  1841     0286                     l1599:
  1842                           
  1843                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1213:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1844     0286  0844               	movf	vfpfcnvrt@cp,w
  1845     0287  0084               	movwf	4
  1846     0288  0845               	movf	vfpfcnvrt@cp+1,w
  1847     0289  0085               	movwf	5
  1848     028A  0012               	moviw fsr0++
  1849     028B  3A64               	xorlw	100
  1850     028C  1903               	btfsc	3,2
  1851     028D  2A8F               	goto	u1251
  1852     028E  2A90               	goto	u1250
  1853     028F                     u1251:
  1854     028F  2A9A               	goto	l1603
  1855     0290                     u1250:
  1856     0290                     l1601:
  1857     0290  0844               	movf	vfpfcnvrt@cp,w
  1858     0291  0084               	movwf	4
  1859     0292  0845               	movf	vfpfcnvrt@cp+1,w
  1860     0293  0085               	movwf	5
  1861     0294  0012               	moviw fsr0++
  1862     0295  3A69               	xorlw	105
  1863     0296  1D03               	btfss	3,2
  1864     0297  2A99               	goto	u1261
  1865     0298  2A9A               	goto	u1260
  1866     0299                     u1261:
  1867     0299  2ABC               	goto	l1611
  1868     029A                     u1260:
  1869     029A                     l1603:
  1870                           
  1871                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1256:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1872     029A  0838               	movf	vfpfcnvrt@ap,w
  1873     029B  0086               	movwf	6
  1874     029C  0187               	clrf	7
  1875     029D  0801               	movf	1,w
  1876     029E  0084               	movwf	4
  1877     029F  0185               	clrf	5
  1878     02A0  3002               	movlw	2
  1879     02A1  0781               	addwf	1,f
  1880     02A2  3F00               	moviw [0]fsr0
  1881     02A3  00BD               	movwf	vfpfcnvrt@convarg
  1882     02A4  3F01               	moviw [1]fsr0
  1883     02A5  00BE               	movwf	vfpfcnvrt@convarg+1
  1884     02A6                     l1605:
  1885                           
  1886                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1258:    *fmt = c
      +                          p+1;
  1887     02A6  0844               	movf	vfpfcnvrt@cp,w
  1888     02A7  3E01               	addlw	1
  1889     02A8  00B9               	movwf	??_vfpfcnvrt
  1890     02A9  3000               	movlw	0
  1891     02AA  3D45               	addwfc	vfpfcnvrt@cp+1,w
  1892     02AB  00BA               	movwf	??_vfpfcnvrt+1
  1893     02AC  0837               	movf	vfpfcnvrt@fmt,w
  1894     02AD  0086               	movwf	6
  1895     02AE  0187               	clrf	7
  1896     02AF  0839               	movf	??_vfpfcnvrt,w
  1897     02B0  3FC0               	movwi [0]fsr1
  1898     02B1  083A               	movf	??_vfpfcnvrt+1,w
  1899     02B2  3FC1               	movwi [1]fsr1
  1900     02B3                     l1607:
  1901                           
  1902                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1259:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1903     02B3  083E               	movf	vfpfcnvrt@convarg+1,w
  1904     02B4  00AB               	movwf	dtoa@d+1
  1905     02B5  083D               	movf	vfpfcnvrt@convarg,w
  1906     02B6  00AA               	movwf	dtoa@d
  1907     02B7  0843               	movf	vfpfcnvrt@fp,w
  1908     02B8  3181  2140  3182   	fcall	_dtoa
  1909     02BB  2ADE               	goto	l713
  1910     02BC                     l1611:
  1911                           
  1912                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1535:         ++*
      +                          fmt;
  1913     02BC  0020               	movlb	0	; select bank0
  1914     02BD  0837               	movf	vfpfcnvrt@fmt,w
  1915     02BE  0086               	movwf	6
  1916     02BF  0187               	clrf	7
  1917     02C0  3001               	movlw	1
  1918     02C1  0781               	addwf	1,f
  1919     02C2  3141               	addfsr 1,1
  1920     02C3  1803               	skipnc
  1921     02C4  0A81               	incf	1,f
  1922     02C5  2ADE               	goto	l713
  1923     02C6                     l1615:
  1924                           
  1925                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1540:     fputc((
      +                          int)(*fmt)[0], fp);
  1926     02C6  0837               	movf	vfpfcnvrt@fmt,w
  1927     02C7  0086               	movwf	6
  1928     02C8  0187               	clrf	7
  1929     02C9  3F40               	moviw [0]fsr1
  1930     02CA  00B9               	movwf	??_vfpfcnvrt
  1931     02CB  3F41               	moviw [1]fsr1
  1932     02CC  00BA               	movwf	??_vfpfcnvrt+1
  1933     02CD  0839               	movf	??_vfpfcnvrt,w
  1934     02CE  0084               	movwf	4
  1935     02CF  083A               	movf	??_vfpfcnvrt+1,w
  1936     02D0  0085               	movwf	5
  1937     02D1  0800               	movf	0,w	;code access
  1938     02D2  00BB               	movwf	??_vfpfcnvrt+2
  1939     02D3  01BC               	clrf	??_vfpfcnvrt+3
  1940     02D4  083B               	movf	??_vfpfcnvrt+2,w
  1941     02D5  00F0               	movwf	fputc@c
  1942     02D6  083C               	movf	??_vfpfcnvrt+3,w
  1943     02D7  00F1               	movwf	fputc@c+1
  1944     02D8  0843               	movf	vfpfcnvrt@fp,w
  1945     02D9  00F2               	movwf	fputc@fp
  1946     02DA  3185  25B3  3182   	fcall	_fputc
  1947     02DD  2ABC               	goto	l1611
  1948     02DE                     l713:
  1949     02DE  0008               	return
  1950     02DF                     __end_of_vfpfcnvrt:
  1951                           
  1952                           	psect	text4
  1953     04A1                     __ptext4:	
  1954 ;; *************** function _read_prec_or_width *****************
  1955 ;; Defined at:
  1956 ;;		line 1029 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  fmt             1    wreg     PTR PTR const unsigned c
  1959 ;;		 -> vfprintf@cfmt(2), 
  1960 ;;  ap              1    6[COMMON] PTR PTR void [1]
  1961 ;;		 -> sprintf@ap(1), 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  fmt             1    3[BANK0 ] PTR PTR const unsigned c
  1964 ;;		 -> vfprintf@cfmt(2), 
  1965 ;;  c               1    0[BANK0 ] unsigned char 
  1966 ;;  n               2    1[BANK0 ] int 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  2    6[COMMON] int 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1977 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1978 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1979 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1980 ;;Total ram usage:        9 bytes
  1981 ;; Hardware stack levels used: 1
  1982 ;; Hardware stack levels required when called: 2
  1983 ;; This function calls:
  1984 ;;		___wmul
  1985 ;; This function is called by:
  1986 ;;		_vfpfcnvrt
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990     04A1                     _read_prec_or_width:	
  1991                           ;psect for function _read_prec_or_width
  1992                           
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1996                           ;read_prec_or_width@fmt stored from wreg
  1997     04A1  0020               	movlb	0	; select bank0
  1998     04A2  00A3               	movwf	read_prec_or_width@fmt
  1999     04A3                     l1551:
  2000                           
  2001                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1030:     int n =
      +                           0;
  2002     04A3  01A1               	clrf	read_prec_or_width@n
  2003     04A4  01A2               	clrf	read_prec_or_width@n+1
  2004     04A5                     l1553:
  2005                           
  2006                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1031:     if ((*f
      +                          mt)[0] == '*') {
  2007     04A5  0823               	movf	read_prec_or_width@fmt,w
  2008     04A6  0086               	movwf	6
  2009     04A7  0187               	clrf	7
  2010     04A8  3F40               	moviw [0]fsr1
  2011     04A9  00F8               	movwf	??_read_prec_or_width
  2012     04AA  3F41               	moviw [1]fsr1
  2013     04AB  00F9               	movwf	??_read_prec_or_width+1
  2014     04AC  0878               	movf	??_read_prec_or_width,w
  2015     04AD  0084               	movwf	4
  2016     04AE  0879               	movf	??_read_prec_or_width+1,w
  2017     04AF  0085               	movwf	5
  2018     04B0  0012               	moviw fsr0++
  2019     04B1  3A2A               	xorlw	42
  2020     04B2  1D03               	btfss	3,2
  2021     04B3  2CB5               	goto	u1201
  2022     04B4  2CB6               	goto	u1200
  2023     04B5                     u1201:
  2024     04B5  2CE8               	goto	l1563
  2025     04B6                     u1200:
  2026     04B6                     l1555:
  2027                           
  2028                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1032:         ++*
      +                          fmt;
  2029     04B6  0823               	movf	read_prec_or_width@fmt,w
  2030     04B7  0086               	movwf	6
  2031     04B8  0187               	clrf	7
  2032     04B9  3001               	movlw	1
  2033     04BA  0781               	addwf	1,f
  2034     04BB  3141               	addfsr 1,1
  2035     04BC  1803               	skipnc
  2036     04BD  0A81               	incf	1,f
  2037     04BE                     l1557:
  2038                           
  2039                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1033:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  2040     04BE  0876               	movf	read_prec_or_width@ap,w
  2041     04BF  0086               	movwf	6
  2042     04C0  0187               	clrf	7
  2043     04C1  0801               	movf	1,w
  2044     04C2  0084               	movwf	4
  2045     04C3  0185               	clrf	5
  2046     04C4  3002               	movlw	2
  2047     04C5  0781               	addwf	1,f
  2048     04C6  3F00               	moviw [0]fsr0
  2049     04C7  00A1               	movwf	read_prec_or_width@n
  2050     04C8  3F01               	moviw [1]fsr0
  2051     04C9  00A2               	movwf	read_prec_or_width@n+1
  2052                           
  2053                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1034:     } else 
      +                          {
  2054     04CA  2CFC               	goto	l1565
  2055     04CB                     l1559:
  2056                           
  2057                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1037:            
      +                           n = n * 10 + c;
  2058     04CB  0820               	movf	read_prec_or_width@c,w
  2059     04CC  00F8               	movwf	??_read_prec_or_width
  2060     04CD  01F9               	clrf	??_read_prec_or_width+1
  2061     04CE  0822               	movf	read_prec_or_width@n+1,w
  2062     04CF  00F1               	movwf	___wmul@multiplier+1
  2063     04D0  0821               	movf	read_prec_or_width@n,w
  2064     04D1  00F0               	movwf	___wmul@multiplier
  2065     04D2  300A               	movlw	10
  2066     04D3  00F2               	movwf	___wmul@multiplicand
  2067     04D4  3000               	movlw	0
  2068     04D5  00F3               	movwf	___wmul@multiplicand+1
  2069     04D6  3186  26F2  3184   	fcall	___wmul
  2070     04D9  0878               	movf	??_read_prec_or_width,w
  2071     04DA  0770               	addwf	?___wmul,w
  2072     04DB  0020               	movlb	0	; select bank0
  2073     04DC  00A1               	movwf	read_prec_or_width@n
  2074     04DD  0879               	movf	??_read_prec_or_width+1,w
  2075     04DE  3D71               	addwfc	?___wmul+1,w
  2076     04DF  00A2               	movwf	read_prec_or_width@n+1
  2077     04E0                     l1561:
  2078                           
  2079                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1038:            
      +                           ++*fmt;
  2080     04E0  0823               	movf	read_prec_or_width@fmt,w
  2081     04E1  0086               	movwf	6
  2082     04E2  0187               	clrf	7
  2083     04E3  3001               	movlw	1
  2084     04E4  0781               	addwf	1,f
  2085     04E5  3141               	addfsr 1,1
  2086     04E6  1803               	skipnc
  2087     04E7  0A81               	incf	1,f
  2088     04E8                     l1563:
  2089                           
  2090                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1036:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2091     04E8  0823               	movf	read_prec_or_width@fmt,w
  2092     04E9  0086               	movwf	6
  2093     04EA  0187               	clrf	7
  2094     04EB  3F40               	moviw [0]fsr1
  2095     04EC  00F8               	movwf	??_read_prec_or_width
  2096     04ED  3F41               	moviw [1]fsr1
  2097     04EE  00F9               	movwf	??_read_prec_or_width+1
  2098     04EF  0878               	movf	??_read_prec_or_width,w
  2099     04F0  0084               	movwf	4
  2100     04F1  0879               	movf	??_read_prec_or_width+1,w
  2101     04F2  0085               	movwf	5
  2102     04F3  0800               	movf	0,w	;code access
  2103     04F4  3ED0               	addlw	208
  2104     04F5  00A0               	movwf	read_prec_or_width@c
  2105     04F6  300A               	movlw	10
  2106     04F7  0220               	subwf	read_prec_or_width@c,w
  2107     04F8  1C03               	skipc
  2108     04F9  2CFB               	goto	u1211
  2109     04FA  2CFC               	goto	u1210
  2110     04FB                     u1211:
  2111     04FB  2CCB               	goto	l1559
  2112     04FC                     u1210:
  2113     04FC                     l1565:
  2114                           
  2115                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1041:     return 
      +                          n;
  2116     04FC  0822               	movf	read_prec_or_width@n+1,w
  2117     04FD  00F7               	movwf	?_read_prec_or_width+1
  2118     04FE  0821               	movf	read_prec_or_width@n,w
  2119     04FF  00F6               	movwf	?_read_prec_or_width
  2120     0500                     l698:
  2121     0500  0008               	return
  2122     0501                     __end_of_read_prec_or_width:
  2123                           
  2124                           	psect	text5
  2125     06F2                     __ptext5:	
  2126 ;; *************** function ___wmul *****************
  2127 ;; Defined at:
  2128 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul16.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  multiplier      2    0[COMMON] unsigned int 
  2131 ;;  multiplicand    2    2[COMMON] unsigned int 
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;  product         2    4[COMMON] unsigned int 
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  2    0[COMMON] unsigned int 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2143 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2146 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2147 ;;Total ram usage:        6 bytes
  2148 ;; Hardware stack levels used: 1
  2149 ;; Hardware stack levels required when called: 1
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_read_prec_or_width
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157     06F2                     ___wmul:	
  2158                           ;psect for function ___wmul
  2159                           
  2160     06F2                     l1375:	
  2161                           ;incstack = 0
  2162                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2163                           
  2164     06F2  01F4               	clrf	___wmul@product
  2165     06F3  01F5               	clrf	___wmul@product+1
  2166     06F4                     l1377:
  2167     06F4  1C70               	btfss	___wmul@multiplier,0
  2168     06F5  2EF7               	goto	u791
  2169     06F6  2EF8               	goto	u790
  2170     06F7                     u791:
  2171     06F7  2EFC               	goto	l177
  2172     06F8                     u790:
  2173     06F8                     l1379:
  2174     06F8  0872               	movf	___wmul@multiplicand,w
  2175     06F9  07F4               	addwf	___wmul@product,f
  2176     06FA  0873               	movf	___wmul@multiplicand+1,w
  2177     06FB  3DF5               	addwfc	___wmul@product+1,f
  2178     06FC                     l177:
  2179     06FC  3001               	movlw	1
  2180     06FD                     u805:
  2181     06FD  35F2               	lslf	___wmul@multiplicand,f
  2182     06FE  0DF3               	rlf	___wmul@multiplicand+1,f
  2183     06FF  0B89               	decfsz	9,f
  2184     0700  2EFD               	goto	u805
  2185     0701                     l1381:
  2186     0701  3001               	movlw	1
  2187     0702                     u815:
  2188     0702  36F1               	lsrf	___wmul@multiplier+1,f
  2189     0703  0CF0               	rrf	___wmul@multiplier,f
  2190     0704  0B89               	decfsz	9,f
  2191     0705  2F02               	goto	u815
  2192     0706                     l1383:
  2193     0706  0870               	movf	___wmul@multiplier,w
  2194     0707  0471               	iorwf	___wmul@multiplier+1,w
  2195     0708  1D03               	btfss	3,2
  2196     0709  2F0B               	goto	u821
  2197     070A  2F0C               	goto	u820
  2198     070B                     u821:
  2199     070B  2EF4               	goto	l1377
  2200     070C                     u820:
  2201     070C                     l1385:
  2202     070C  0875               	movf	___wmul@product+1,w
  2203     070D  00F1               	movwf	?___wmul+1
  2204     070E  0874               	movf	___wmul@product,w
  2205     070F  00F0               	movwf	?___wmul
  2206     0710                     l179:
  2207     0710  0008               	return
  2208     0711                     __end_of___wmul:
  2209                           
  2210                           	psect	text6
  2211     0140                     __ptext6:	
  2212 ;; *************** function _dtoa *****************
  2213 ;; Defined at:
  2214 ;;		line 470 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  fp              1    wreg     PTR struct _IO_FILE
  2217 ;;		 -> sprintf@f(11), 
  2218 ;;  d               2   10[BANK0 ] int 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  fp              1   15[BANK0 ] PTR struct _IO_FILE
  2221 ;;		 -> sprintf@f(11), 
  2222 ;;  i               2   20[BANK0 ] int 
  2223 ;;  w               2   18[BANK0 ] int 
  2224 ;;  p               2   16[BANK0 ] int 
  2225 ;;  s               1   22[BANK0 ] unsigned char 
  2226 ;; Return value:  Size  Location     Type
  2227 ;;                  1    wreg      void 
  2228 ;; Registers used:
  2229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2230 ;; Tracked objects:
  2231 ;;		On entry : 0/0
  2232 ;;		On exit  : 0/0
  2233 ;;		Unchanged: 0/0
  2234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2235 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2236 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2238 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2239 ;;Total ram usage:       13 bytes
  2240 ;; Hardware stack levels used: 1
  2241 ;; Hardware stack levels required when called: 5
  2242 ;; This function calls:
  2243 ;;		___awdiv
  2244 ;;		___awmod
  2245 ;;		_abs
  2246 ;;		_pad
  2247 ;; This function is called by:
  2248 ;;		_vfpfcnvrt
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252     0140                     _dtoa:	
  2253                           ;psect for function _dtoa
  2254                           
  2255                           
  2256                           ;incstack = 0
  2257                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2258                           ;dtoa@fp stored from wreg
  2259     0140  0020               	movlb	0	; select bank0
  2260     0141  00AF               	movwf	dtoa@fp
  2261     0142                     l1493:
  2262                           
  2263                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 470: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\commo
      +                          n\doprnt.c: 471: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c:
      +                           472:  char s;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 473
      +                          :     int i, p, w;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c:
      +                           476:     s = d < 0 ? 1 : 0;
  2264     0142  1BAB               	btfsc	dtoa@d+1,7
  2265     0143  2945               	goto	u1071
  2266     0144  2947               	goto	u1070
  2267     0145                     u1071:
  2268     0145  3001               	movlw	1
  2269     0146  2948               	goto	u1080
  2270     0147                     u1070:
  2271     0147  3000               	movlw	0
  2272     0148                     u1080:
  2273     0148  00B6               	movwf	dtoa@s
  2274     0149                     l1495:
  2275                           
  2276                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 477:     if (s) {
  2277     0149  0836               	movf	dtoa@s,w
  2278     014A  1903               	btfsc	3,2
  2279     014B  294D               	goto	u1091
  2280     014C  294E               	goto	u1090
  2281     014D                     u1091:
  2282     014D  2953               	goto	l1499
  2283     014E                     u1090:
  2284     014E                     l1497:
  2285                           
  2286                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 478:         d = 
      +                          -d;
  2287     014E  09AA               	comf	dtoa@d,f
  2288     014F  09AB               	comf	dtoa@d+1,f
  2289     0150  0AAA               	incf	dtoa@d,f
  2290     0151  1903               	skipnz
  2291     0152  0AAB               	incf	dtoa@d+1,f
  2292     0153                     l1499:
  2293                           
  2294                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 483:     if (!(pr
      +                          ec < 0)) {
  2295     0153  1BE4               	btfsc	_prec+1,7
  2296     0154  2956               	goto	u1101
  2297     0155  2957               	goto	u1100
  2298     0156                     u1101:
  2299     0156  295B               	goto	l1503
  2300     0157                     u1100:
  2301     0157                     l1501:
  2302                           
  2303                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 484:         flag
      +                          s &= ~(1 << 1);
  2304     0157  30FD               	movlw	253
  2305     0158  00AC               	movwf	??_dtoa
  2306     0159  082C               	movf	??_dtoa,w
  2307     015A  05E7               	andwf	_flags,f
  2308     015B                     l1503:
  2309                           
  2310                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 487:     p = (0 <
      +                          = prec) ? prec : 1;
  2311     015B  1FE4               	btfss	_prec+1,7
  2312     015C  295E               	goto	u1111
  2313     015D  295F               	goto	u1110
  2314     015E                     u1111:
  2315     015E  2964               	goto	l1507
  2316     015F                     u1110:
  2317     015F                     l1505:
  2318     015F  3001               	movlw	1
  2319     0160  00B0               	movwf	dtoa@p
  2320     0161  3000               	movlw	0
  2321     0162  00B1               	movwf	dtoa@p+1
  2322     0163  2968               	goto	l676
  2323     0164                     l1507:
  2324     0164  0864               	movf	_prec+1,w
  2325     0165  00B1               	movwf	dtoa@p+1
  2326     0166  0863               	movf	_prec,w
  2327     0167  00B0               	movwf	dtoa@p
  2328     0168                     l676:
  2329                           
  2330                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 488:     w = widt
      +                          h;
  2331     0168  0862               	movf	_width+1,w
  2332     0169  00B3               	movwf	dtoa@w+1
  2333     016A  0861               	movf	_width,w
  2334     016B  00B2               	movwf	dtoa@w
  2335     016C                     l1509:
  2336                           
  2337                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 489:     if (s
  2338     016C  0836               	movf	dtoa@s,w
  2339     016D  1903               	btfsc	3,2
  2340     016E  2970               	goto	u1121
  2341     016F  2971               	goto	u1120
  2342     0170                     u1121:
  2343     0170  2985               	goto	l677
  2344     0171                     u1120:
  2345     0171                     l1511:
  2346                           
  2347                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 493:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 494:         --w;
  2348     0171  30FF               	movlw	255
  2349     0172  07B2               	addwf	dtoa@w,f
  2350     0173  30FF               	movlw	255
  2351     0174  3DB3               	addwfc	dtoa@w+1,f
  2352     0175                     l1513:
  2353                           
  2354                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 495:   s = s ? '-
      +                          ' : '+';
  2355     0175  0836               	movf	dtoa@s,w
  2356     0176  1D03               	btfss	3,2
  2357     0177  2979               	goto	u1131
  2358     0178  297A               	goto	u1130
  2359     0179                     u1131:
  2360     0179  297F               	goto	l1517
  2361     017A                     u1130:
  2362     017A                     l1515:
  2363     017A  302B               	movlw	43
  2364     017B  00AD               	movwf	_dtoa$647
  2365     017C  3000               	movlw	0
  2366     017D  00AE               	movwf	_dtoa$647+1
  2367     017E  2983               	goto	l681
  2368     017F                     l1517:
  2369     017F  302D               	movlw	45
  2370     0180  00AD               	movwf	_dtoa$647
  2371     0181  3000               	movlw	0
  2372     0182  00AE               	movwf	_dtoa$647+1
  2373     0183                     l681:
  2374     0183  082D               	movf	_dtoa$647,w
  2375     0184  00B6               	movwf	dtoa@s
  2376     0185                     l677:	
  2377                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 496:     }
  2378                           
  2379                           
  2380                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 505:     i = size
      +                          of(dbuf) - 1;
  2381     0185  301F               	movlw	31
  2382     0186  00B4               	movwf	dtoa@i
  2383     0187  3000               	movlw	0
  2384     0188  00B5               	movwf	dtoa@i+1
  2385     0189                     l1519:
  2386                           
  2387                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 506:     dbuf[i] 
      +                          = '\0';
  2388     0189  0021               	movlb	1	; select bank1
  2389     018A  01BF               	clrf	(_dbuf^(0+128)+31)
  2390                           
  2391                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 507:     while (!
      +                          (i < 1) && (d || (0 < p)
  2392     018B  29C3               	goto	l1531
  2393     018C                     l1521:
  2394                           
  2395                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 511:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 512:         --i;
  2396     018C  30FF               	movlw	255
  2397     018D  0020               	movlb	0	; select bank0
  2398     018E  07B4               	addwf	dtoa@i,f
  2399     018F  30FF               	movlw	255
  2400     0190  3DB5               	addwfc	dtoa@i+1,f
  2401     0191                     l1523:
  2402                           
  2403                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 513:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2404     0191  0834               	movf	dtoa@i,w
  2405     0192  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2406     0193  0086               	movwf	6
  2407     0194  0187               	clrf	7
  2408     0195  300A               	movlw	10
  2409     0196  00F0               	movwf	___awmod@divisor
  2410     0197  3000               	movlw	0
  2411     0198  00F1               	movwf	___awmod@divisor+1
  2412     0199  082B               	movf	dtoa@d+1,w
  2413     019A  00F3               	movwf	___awmod@dividend+1
  2414     019B  082A               	movf	dtoa@d,w
  2415     019C  00F2               	movwf	___awmod@dividend
  2416     019D  3185  2560  3181   	fcall	___awmod
  2417     01A0  0871               	movf	?___awmod+1,w
  2418     01A1  00F8               	movwf	abs@a+1
  2419     01A2  0870               	movf	?___awmod,w
  2420     01A3  00F7               	movwf	abs@a
  2421     01A4  3187  274A  3181   	fcall	_abs
  2422     01A7  0877               	movf	?_abs,w
  2423     01A8  3E30               	addlw	48
  2424     01A9  0081               	movwf	1
  2425     01AA                     l1525:
  2426                           
  2427                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 514:         --p;
  2428     01AA  30FF               	movlw	255
  2429     01AB  0020               	movlb	0	; select bank0
  2430     01AC  07B0               	addwf	dtoa@p,f
  2431     01AD  30FF               	movlw	255
  2432     01AE  3DB1               	addwfc	dtoa@p+1,f
  2433     01AF                     l1527:
  2434                           
  2435                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 515:         --w;
  2436     01AF  30FF               	movlw	255
  2437     01B0  07B2               	addwf	dtoa@w,f
  2438     01B1  30FF               	movlw	255
  2439     01B2  3DB3               	addwfc	dtoa@w+1,f
  2440     01B3                     l1529:
  2441                           
  2442                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 516:         d = 
      +                          d / 10;
  2443     01B3  300A               	movlw	10
  2444     01B4  00F0               	movwf	___awdiv@divisor
  2445     01B5  3000               	movlw	0
  2446     01B6  00F1               	movwf	___awdiv@divisor+1
  2447     01B7  082B               	movf	dtoa@d+1,w
  2448     01B8  00F3               	movwf	___awdiv@dividend+1
  2449     01B9  082A               	movf	dtoa@d,w
  2450     01BA  00F2               	movwf	___awdiv@dividend
  2451     01BB  3185  2501  3181   	fcall	___awdiv
  2452     01BE  0871               	movf	?___awdiv+1,w
  2453     01BF  0020               	movlb	0	; select bank0
  2454     01C0  00AB               	movwf	dtoa@d+1
  2455     01C1  0870               	movf	?___awdiv,w
  2456     01C2  00AA               	movwf	dtoa@d
  2457     01C3                     l1531:
  2458                           
  2459                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 507:     while (!
      +                          (i < 1) && (d || (0 < p)
  2460     01C3  0020               	movlb	0	; select bank0
  2461     01C4  0835               	movf	dtoa@i+1,w
  2462     01C5  3A80               	xorlw	128
  2463     01C6  00AC               	movwf	??_dtoa
  2464     01C7  3080               	movlw	128
  2465     01C8  022C               	subwf	??_dtoa,w
  2466     01C9  1D03               	skipz
  2467     01CA  29CD               	goto	u1145
  2468     01CB  3001               	movlw	1
  2469     01CC  0234               	subwf	dtoa@i,w
  2470     01CD                     u1145:
  2471     01CD  1C03               	skipc
  2472     01CE  29D0               	goto	u1141
  2473     01CF  29D1               	goto	u1140
  2474     01D0                     u1141:
  2475     01D0  29F8               	goto	l1541
  2476     01D1                     u1140:
  2477     01D1                     l1533:
  2478     01D1  0020               	movlb	0	; select bank0
  2479     01D2  082A               	movf	dtoa@d,w
  2480     01D3  042B               	iorwf	dtoa@d+1,w
  2481     01D4  1D03               	btfss	3,2
  2482     01D5  29D7               	goto	u1151
  2483     01D6  29D8               	goto	u1150
  2484     01D7                     u1151:
  2485     01D7  298C               	goto	l1521
  2486     01D8                     u1150:
  2487     01D8                     l1535:
  2488     01D8  0831               	movf	dtoa@p+1,w
  2489     01D9  3A80               	xorlw	128
  2490     01DA  00AC               	movwf	??_dtoa
  2491     01DB  3080               	movlw	128
  2492     01DC  022C               	subwf	??_dtoa,w
  2493     01DD  1D03               	skipz
  2494     01DE  29E1               	goto	u1165
  2495     01DF  3001               	movlw	1
  2496     01E0  0230               	subwf	dtoa@p,w
  2497     01E1                     u1165:
  2498     01E1  1803               	skipnc
  2499     01E2  29E4               	goto	u1161
  2500     01E3  29E5               	goto	u1160
  2501     01E4                     u1161:
  2502     01E4  298C               	goto	l1521
  2503     01E5                     u1160:
  2504     01E5                     l1537:
  2505     01E5  0020               	movlb	0	; select bank0
  2506     01E6  0833               	movf	dtoa@w+1,w
  2507     01E7  3A80               	xorlw	128
  2508     01E8  00AC               	movwf	??_dtoa
  2509     01E9  3080               	movlw	128
  2510     01EA  022C               	subwf	??_dtoa,w
  2511     01EB  1D03               	skipz
  2512     01EC  29EF               	goto	u1175
  2513     01ED  3001               	movlw	1
  2514     01EE  0232               	subwf	dtoa@w,w
  2515     01EF                     u1175:
  2516     01EF  1C03               	skipc
  2517     01F0  29F2               	goto	u1171
  2518     01F1  29F3               	goto	u1170
  2519     01F2                     u1171:
  2520     01F2  29F8               	goto	l1541
  2521     01F3                     u1170:
  2522     01F3                     l1539:
  2523     01F3  0020               	movlb	0	; select bank0
  2524     01F4  18E7               	btfsc	_flags,1
  2525     01F5  29F7               	goto	u1181
  2526     01F6  29F8               	goto	u1180
  2527     01F7                     u1181:
  2528     01F7  298C               	goto	l1521
  2529     01F8                     u1180:
  2530     01F8                     l1541:
  2531                           
  2532                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 520:     if (s !=
      +                           0) {
  2533     01F8  0020               	movlb	0	; select bank0
  2534     01F9  0836               	movf	dtoa@s,w
  2535     01FA  1903               	btfsc	3,2
  2536     01FB  29FD               	goto	u1191
  2537     01FC  29FE               	goto	u1190
  2538     01FD                     u1191:
  2539     01FD  2A08               	goto	l1547
  2540     01FE                     u1190:
  2541     01FE                     l1543:
  2542                           
  2543                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 521:         --i;
  2544     01FE  30FF               	movlw	255
  2545     01FF  07B4               	addwf	dtoa@i,f
  2546     0200  30FF               	movlw	255
  2547     0201  3DB5               	addwfc	dtoa@i+1,f
  2548     0202                     l1545:
  2549                           
  2550                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 522:         dbuf
      +                          [i] = s;
  2551     0202  0834               	movf	dtoa@i,w
  2552     0203  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2553     0204  0086               	movwf	6
  2554     0205  0187               	clrf	7
  2555     0206  0836               	movf	dtoa@s,w
  2556     0207  0081               	movwf	1
  2557     0208                     l1547:
  2558                           
  2559                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 526:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2560     0208  0834               	movf	dtoa@i,w
  2561     0209  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2562     020A  00FB               	movwf	pad@buf
  2563     020B  0833               	movf	dtoa@w+1,w
  2564     020C  00FD               	movwf	pad@p+1
  2565     020D  0832               	movf	dtoa@w,w
  2566     020E  00FC               	movwf	pad@p
  2567     020F  082F               	movf	dtoa@fp,w
  2568     0210  3186  2603  3181   	fcall	_pad
  2569     0213                     l690:
  2570     0213  0008               	return
  2571     0214                     __end_of_dtoa:
  2572                           
  2573                           	psect	text7
  2574     0603                     __ptext7:	
  2575 ;; *************** function _pad *****************
  2576 ;; Defined at:
  2577 ;;		line 152 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;  fp              1    wreg     PTR struct _IO_FILE
  2580 ;;		 -> sprintf@f(11), 
  2581 ;;  buf             1   11[COMMON] PTR unsigned char 
  2582 ;;		 -> dbuf(32), 
  2583 ;;  p               2   12[COMMON] int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  fp              1    9[BANK0 ] PTR struct _IO_FILE
  2586 ;;		 -> sprintf@f(11), 
  2587 ;;  w               2    7[BANK0 ] int 
  2588 ;;  i               2    5[BANK0 ] int 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2598 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2599 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2601 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2602 ;;Total ram usage:        9 bytes
  2603 ;; Hardware stack levels used: 1
  2604 ;; Hardware stack levels required when called: 4
  2605 ;; This function calls:
  2606 ;;		_fputc
  2607 ;;		_fputs
  2608 ;; This function is called by:
  2609 ;;		_dtoa
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613     0603                     _pad:	
  2614                           ;psect for function _pad
  2615                           
  2616                           
  2617                           ;incstack = 0
  2618                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2619                           ;pad@fp stored from wreg
  2620     0603  0020               	movlb	0	; select bank0
  2621     0604  00A9               	movwf	pad@fp
  2622     0605                     l1471:
  2623                           
  2624                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 152: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\com
      +                          mon\doprnt.c: 153: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.
      +                          c: 154:     int i, w;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt
      +                          .c: 158:     if (flags & (1 << 0)) {
  2625     0605  1C67               	btfss	_flags,0
  2626     0606  2E08               	goto	u1021
  2627     0607  2E09               	goto	u1020
  2628     0608                     u1021:
  2629     0608  2E0F               	goto	l1475
  2630     0609                     u1020:
  2631     0609                     l1473:
  2632                           
  2633                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 159:         fput
      +                          s((const char *)buf, fp);
  2634     0609  0829               	movf	pad@fp,w
  2635     060A  00F8               	movwf	fputs@fp
  2636     060B  087B               	movf	pad@buf,w
  2637     060C  3186  26CE  3186   	fcall	_fputs
  2638     060F                     l1475:
  2639                           
  2640                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 164:     w = (p <
      +                           0) ? 0 : p;
  2641     060F  1BFD               	btfsc	pad@p+1,7
  2642     0610  2E12               	goto	u1031
  2643     0611  2E13               	goto	u1030
  2644     0612                     u1031:
  2645     0612  2E19               	goto	l1479
  2646     0613                     u1030:
  2647     0613                     l1477:
  2648     0613  087D               	movf	pad@p+1,w
  2649     0614  0020               	movlb	0	; select bank0
  2650     0615  00A8               	movwf	pad@w+1
  2651     0616  087C               	movf	pad@p,w
  2652     0617  00A7               	movwf	pad@w
  2653     0618  2E1C               	goto	l663
  2654     0619                     l1479:
  2655     0619  0020               	movlb	0	; select bank0
  2656     061A  01A7               	clrf	pad@w
  2657     061B  01A8               	clrf	pad@w+1
  2658     061C                     l663:
  2659                           
  2660                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 165:     i = 0;
  2661     061C  01A5               	clrf	pad@i
  2662     061D  01A6               	clrf	pad@i+1
  2663                           
  2664                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 166:     while (i
      +                           < w) {
  2665     061E  2E2E               	goto	l1485
  2666     061F                     l1481:
  2667                           
  2668                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 167:         fput
      +                          c(' ', fp);
  2669     061F  3020               	movlw	32
  2670     0620  00F0               	movwf	fputc@c
  2671     0621  3000               	movlw	0
  2672     0622  00F1               	movwf	fputc@c+1
  2673     0623  0020               	movlb	0	; select bank0
  2674     0624  0829               	movf	pad@fp,w
  2675     0625  00F2               	movwf	fputc@fp
  2676     0626  3185  25B3  3186   	fcall	_fputc
  2677     0629                     l1483:
  2678                           
  2679                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 168:         ++i;
  2680     0629  3001               	movlw	1
  2681     062A  0020               	movlb	0	; select bank0
  2682     062B  07A5               	addwf	pad@i,f
  2683     062C  3000               	movlw	0
  2684     062D  3DA6               	addwfc	pad@i+1,f
  2685     062E                     l1485:
  2686                           
  2687                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 166:     while (i
      +                           < w) {
  2688     062E  0826               	movf	pad@i+1,w
  2689     062F  3A80               	xorlw	128
  2690     0630  00A4               	movwf	??_pad
  2691     0631  0828               	movf	pad@w+1,w
  2692     0632  3A80               	xorlw	128
  2693     0633  0224               	subwf	??_pad,w
  2694     0634  1D03               	skipz
  2695     0635  2E38               	goto	u1045
  2696     0636  0827               	movf	pad@w,w
  2697     0637  0225               	subwf	pad@i,w
  2698     0638                     u1045:
  2699     0638  1C03               	skipc
  2700     0639  2E3B               	goto	u1041
  2701     063A  2E3C               	goto	u1040
  2702     063B                     u1041:
  2703     063B  2E1F               	goto	l1481
  2704     063C                     u1040:
  2705     063C                     l666:
  2706                           
  2707                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 173:     if (!(fl
      +                          ags & (1 << 0))) {
  2708     063C  0020               	movlb	0	; select bank0
  2709     063D  1867               	btfsc	_flags,0
  2710     063E  2E40               	goto	u1051
  2711     063F  2E41               	goto	u1050
  2712     0640                     u1051:
  2713     0640  2E47               	goto	l668
  2714     0641                     u1050:
  2715     0641                     l1487:
  2716                           
  2717                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 175:         fput
      +                          s((const char *)buf, fp);
  2718     0641  0829               	movf	pad@fp,w
  2719     0642  00F8               	movwf	fputs@fp
  2720     0643  087B               	movf	pad@buf,w
  2721     0644  3186  26CE  3186   	fcall	_fputs
  2722     0647                     l668:
  2723     0647  0008               	return
  2724     0648                     __end_of_pad:
  2725                           
  2726                           	psect	text8
  2727     06CE                     __ptext8:	
  2728 ;; *************** function _fputs *****************
  2729 ;; Defined at:
  2730 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputs.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  s               1    wreg     PTR const unsigned char 
  2733 ;;		 -> dbuf(32), 
  2734 ;;  fp              1    8[COMMON] PTR struct _IO_FILE
  2735 ;;		 -> sprintf@f(11), 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  s               1    3[BANK0 ] PTR const unsigned char 
  2738 ;;		 -> dbuf(32), 
  2739 ;;  i               2    1[BANK0 ] int 
  2740 ;;  c               1    0[BANK0 ] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  2    8[COMMON] int 
  2743 ;; Registers used:
  2744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2750 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2754 ;;Total ram usage:        7 bytes
  2755 ;; Hardware stack levels used: 1
  2756 ;; Hardware stack levels required when called: 3
  2757 ;; This function calls:
  2758 ;;		_fputc
  2759 ;; This function is called by:
  2760 ;;		_pad
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764     06CE                     _fputs:	
  2765                           ;psect for function _fputs
  2766                           
  2767                           
  2768                           ;incstack = 0
  2769                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2770                           ;fputs@s stored from wreg
  2771     06CE  0020               	movlb	0	; select bank0
  2772     06CF  00A3               	movwf	fputs@s
  2773     06D0                     l1367:
  2774     06D0  01A1               	clrf	fputs@i
  2775     06D1  01A2               	clrf	fputs@i+1
  2776     06D2  2EE4               	goto	l1373
  2777     06D3                     l1369:
  2778     06D3  0820               	movf	fputs@c,w
  2779     06D4  00F9               	movwf	??_fputs
  2780     06D5  01FA               	clrf	??_fputs+1
  2781     06D6  0879               	movf	??_fputs,w
  2782     06D7  00F0               	movwf	fputc@c
  2783     06D8  087A               	movf	??_fputs+1,w
  2784     06D9  00F1               	movwf	fputc@c+1
  2785     06DA  0878               	movf	fputs@fp,w
  2786     06DB  00F2               	movwf	fputc@fp
  2787     06DC  3185  25B3  3186   	fcall	_fputc
  2788     06DF                     l1371:
  2789     06DF  3001               	movlw	1
  2790     06E0  0020               	movlb	0	; select bank0
  2791     06E1  07A1               	addwf	fputs@i,f
  2792     06E2  3000               	movlw	0
  2793     06E3  3DA2               	addwfc	fputs@i+1,f
  2794     06E4                     l1373:
  2795     06E4  0821               	movf	fputs@i,w
  2796     06E5  0723               	addwf	fputs@s,w
  2797     06E6  00F9               	movwf	??_fputs
  2798     06E7  0879               	movf	??_fputs,w
  2799     06E8  0086               	movwf	6
  2800     06E9  0187               	clrf	7
  2801     06EA  0801               	movf	1,w
  2802     06EB  00A0               	movwf	fputs@c
  2803     06EC  0820               	movf	fputs@c,w
  2804     06ED  1D03               	btfss	3,2
  2805     06EE  2EF0               	goto	u781
  2806     06EF  2EF1               	goto	u780
  2807     06F0                     u781:
  2808     06F0  2ED3               	goto	l1369
  2809     06F1                     u780:
  2810     06F1                     l746:
  2811     06F1  0008               	return
  2812     06F2                     __end_of_fputs:
  2813                           
  2814                           	psect	text9
  2815     05B3                     __ptext9:	
  2816 ;; *************** function _fputc *****************
  2817 ;; Defined at:
  2818 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputc.c"
  2819 ;; Parameters:    Size  Location     Type
  2820 ;;  c               2    0[COMMON] int 
  2821 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  2822 ;;		 -> sprintf@f(11), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  2    0[COMMON] int 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2834 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2836 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2837 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2838 ;;Total ram usage:        8 bytes
  2839 ;; Hardware stack levels used: 1
  2840 ;; Hardware stack levels required when called: 2
  2841 ;; This function calls:
  2842 ;;		_putch
  2843 ;; This function is called by:
  2844 ;;		_pad
  2845 ;;		_vfpfcnvrt
  2846 ;;		_fputs
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850     05B3                     _fputc:	
  2851                           ;psect for function _fputc
  2852                           
  2853     05B3                     l1351:	
  2854                           ;incstack = 0
  2855                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2856                           
  2857     05B3  0872               	movf	fputc@fp,w
  2858     05B4  1903               	btfsc	3,2
  2859     05B5  2DB7               	goto	u741
  2860     05B6  2DB8               	goto	u740
  2861     05B7                     u741:
  2862     05B7  2DBD               	goto	l1355
  2863     05B8                     u740:
  2864     05B8                     l1353:
  2865     05B8  0872               	movf	fputc@fp,w
  2866     05B9  1D03               	btfss	3,2
  2867     05BA  2DBC               	goto	u751
  2868     05BB  2DBD               	goto	u750
  2869     05BC                     u751:
  2870     05BC  2DC2               	goto	l1357
  2871     05BD                     u750:
  2872     05BD                     l1355:
  2873     05BD  0870               	movf	fputc@c,w
  2874     05BE  3187  27A2  3185   	fcall	_putch
  2875     05C1  2E02               	goto	l738
  2876     05C2                     l1357:
  2877     05C2  0872               	movf	fputc@fp,w
  2878     05C3  3E09               	addlw	9
  2879     05C4  0086               	movwf	6
  2880     05C5  0187               	clrf	7
  2881     05C6  0016               	moviw fsr1++
  2882     05C7  0401               	iorwf	1,w
  2883     05C8  1903               	btfsc	3,2
  2884     05C9  2DCB               	goto	u761
  2885     05CA  2DCC               	goto	u760
  2886     05CB                     u761:
  2887     05CB  2DEA               	goto	l1361
  2888     05CC                     u760:
  2889     05CC                     l1359:
  2890     05CC  0872               	movf	fputc@fp,w
  2891     05CD  3E09               	addlw	9
  2892     05CE  0086               	movwf	6
  2893     05CF  0187               	clrf	7
  2894     05D0  3F40               	moviw [0]fsr1
  2895     05D1  00F3               	movwf	??_fputc
  2896     05D2  3F41               	moviw [1]fsr1
  2897     05D3  00F4               	movwf	??_fputc+1
  2898     05D4  0872               	movf	fputc@fp,w
  2899     05D5  3E02               	addlw	2
  2900     05D6  0086               	movwf	6
  2901     05D7  0187               	clrf	7
  2902     05D8  3F40               	moviw [0]fsr1
  2903     05D9  00F5               	movwf	??_fputc+2
  2904     05DA  3F41               	moviw [1]fsr1
  2905     05DB  00F6               	movwf	??_fputc+3
  2906     05DC  0876               	movf	??_fputc+3,w
  2907     05DD  3A80               	xorlw	128
  2908     05DE  00F7               	movwf	??_fputc+4
  2909     05DF  0874               	movf	??_fputc+1,w
  2910     05E0  3A80               	xorlw	128
  2911     05E1  0277               	subwf	??_fputc+4,w
  2912     05E2  1D03               	skipz
  2913     05E3  2DE6               	goto	u775
  2914     05E4  0873               	movf	??_fputc,w
  2915     05E5  0275               	subwf	??_fputc+2,w
  2916     05E6                     u775:
  2917     05E6  1803               	skipnc
  2918     05E7  2DE9               	goto	u771
  2919     05E8  2DEA               	goto	u770
  2920     05E9                     u771:
  2921     05E9  2E02               	goto	l738
  2922     05EA                     u770:
  2923     05EA                     l1361:
  2924     05EA  0872               	movf	fputc@fp,w
  2925     05EB  0086               	movwf	6
  2926     05EC  0187               	clrf	7
  2927     05ED  0872               	movf	fputc@fp,w
  2928     05EE  3E02               	addlw	2
  2929     05EF  0084               	movwf	4
  2930     05F0  0185               	clrf	5
  2931     05F1  0800               	movf	0,w
  2932     05F2  0701               	addwf	1,w
  2933     05F3  00F3               	movwf	??_fputc
  2934     05F4  0873               	movf	??_fputc,w
  2935     05F5  0086               	movwf	6
  2936     05F6  0187               	clrf	7
  2937     05F7  0870               	movf	fputc@c,w
  2938     05F8  0081               	movwf	1
  2939     05F9                     l1363:
  2940     05F9  0872               	movf	fputc@fp,w
  2941     05FA  3E02               	addlw	2
  2942     05FB  0086               	movwf	6
  2943     05FC  0187               	clrf	7
  2944     05FD  3001               	movlw	1
  2945     05FE  0781               	addwf	1,f
  2946     05FF  3141               	addfsr 1,1
  2947     0600  1803               	skipnc
  2948     0601  0A81               	incf	1,f
  2949     0602                     l738:
  2950     0602  0008               	return
  2951     0603                     __end_of_fputc:
  2952                           
  2953                           	psect	text10
  2954     07A2                     __ptext10:	
  2955 ;; *************** function _putch *****************
  2956 ;; Defined at:
  2957 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\putch.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  c               1    wreg     unsigned char 
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;  c               1    0[COMMON] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2975 ;;Total ram usage:        0 bytes
  2976 ;; Hardware stack levels used: 1
  2977 ;; Hardware stack levels required when called: 1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_fputc
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985     07A2                     _putch:	
  2986                           ;psect for function _putch
  2987                           
  2988     07A2                     l749:	
  2989                           ;incstack = 0
  2990                           ; Regs used in _putch: [wreg]
  2991                           
  2992     07A2  0008               	return
  2993     07A3                     __end_of_putch:
  2994                           
  2995                           	psect	text11
  2996     074A                     __ptext11:	
  2997 ;; *************** function _abs *****************
  2998 ;; Defined at:
  2999 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\abs.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  a               2    7[COMMON] int 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  2    7[COMMON] int 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3016 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3017 ;;Total ram usage:        4 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; Hardware stack levels required when called: 1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_dtoa
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027     074A                     _abs:	
  3028                           ;psect for function _abs
  3029                           
  3030     074A                     l1489:	
  3031                           ;incstack = 0
  3032                           ; Regs used in _abs: [wreg+status,2+status,0]
  3033                           
  3034     074A  0878               	movf	abs@a+1,w
  3035     074B  3A80               	xorlw	128
  3036     074C  00F9               	movwf	??_abs
  3037     074D  3080               	movlw	128
  3038     074E  0279               	subwf	??_abs,w
  3039     074F  1D03               	skipz
  3040     0750  2F53               	goto	u1065
  3041     0751  3001               	movlw	1
  3042     0752  0277               	subwf	abs@a,w
  3043     0753                     u1065:
  3044     0753  1803               	skipnc
  3045     0754  2F56               	goto	u1061
  3046     0755  2F57               	goto	u1060
  3047     0756                     u1061:
  3048     0756  2F63               	goto	l723
  3049     0757                     u1060:
  3050     0757                     l1491:
  3051     0757  0977               	comf	abs@a,w
  3052     0758  00F9               	movwf	??_abs
  3053     0759  0978               	comf	abs@a+1,w
  3054     075A  00FA               	movwf	??_abs+1
  3055     075B  0AF9               	incf	??_abs,f
  3056     075C  1903               	skipnz
  3057     075D  0AFA               	incf	??_abs+1,f
  3058     075E  0879               	movf	??_abs,w
  3059     075F  00F7               	movwf	?_abs
  3060     0760  087A               	movf	??_abs+1,w
  3061     0761  00F8               	movwf	?_abs+1
  3062     0762  2F63               	goto	l726
  3063     0763                     l723:
  3064     0763                     l726:
  3065     0763  0008               	return
  3066     0764                     __end_of_abs:
  3067                           
  3068                           	psect	text12
  3069     0560                     __ptext12:	
  3070 ;; *************** function ___awmod *****************
  3071 ;; Defined at:
  3072 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awmod.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;  divisor         2    0[COMMON] int 
  3075 ;;  dividend        2    2[COMMON] int 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  sign            1    6[COMMON] unsigned char 
  3078 ;;  counter         1    5[COMMON] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  2    0[COMMON] int 
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3088 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3089 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3091 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3092 ;;Total ram usage:        7 bytes
  3093 ;; Hardware stack levels used: 1
  3094 ;; Hardware stack levels required when called: 1
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_dtoa
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102     0560                     ___awmod:	
  3103                           ;psect for function ___awmod
  3104                           
  3105     0560                     l1433:	
  3106                           ;incstack = 0
  3107                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3108                           
  3109     0560  01F6               	clrf	___awmod@sign
  3110     0561                     l1435:
  3111     0561  1FF3               	btfss	___awmod@dividend+1,7
  3112     0562  2D64               	goto	u931
  3113     0563  2D65               	goto	u930
  3114     0564                     u931:
  3115     0564  2D6C               	goto	l1441
  3116     0565                     u930:
  3117     0565                     l1437:
  3118     0565  09F2               	comf	___awmod@dividend,f
  3119     0566  09F3               	comf	___awmod@dividend+1,f
  3120     0567  0AF2               	incf	___awmod@dividend,f
  3121     0568  1903               	skipnz
  3122     0569  0AF3               	incf	___awmod@dividend+1,f
  3123     056A                     l1439:
  3124     056A  01F6               	clrf	___awmod@sign
  3125     056B  0AF6               	incf	___awmod@sign,f
  3126     056C                     l1441:
  3127     056C  1FF1               	btfss	___awmod@divisor+1,7
  3128     056D  2D6F               	goto	u941
  3129     056E  2D70               	goto	u940
  3130     056F                     u941:
  3131     056F  2D75               	goto	l1445
  3132     0570                     u940:
  3133     0570                     l1443:
  3134     0570  09F0               	comf	___awmod@divisor,f
  3135     0571  09F1               	comf	___awmod@divisor+1,f
  3136     0572  0AF0               	incf	___awmod@divisor,f
  3137     0573  1903               	skipnz
  3138     0574  0AF1               	incf	___awmod@divisor+1,f
  3139     0575                     l1445:
  3140     0575  0870               	movf	___awmod@divisor,w
  3141     0576  0471               	iorwf	___awmod@divisor+1,w
  3142     0577  1903               	btfsc	3,2
  3143     0578  2D7A               	goto	u951
  3144     0579  2D7B               	goto	u950
  3145     057A                     u951:
  3146     057A  2DA4               	goto	l1463
  3147     057B                     u950:
  3148     057B                     l1447:
  3149     057B  01F5               	clrf	___awmod@counter
  3150     057C  0AF5               	incf	___awmod@counter,f
  3151     057D  2D87               	goto	l1453
  3152     057E                     l1449:
  3153     057E  3001               	movlw	1
  3154     057F                     u965:
  3155     057F  35F0               	lslf	___awmod@divisor,f
  3156     0580  0DF1               	rlf	___awmod@divisor+1,f
  3157     0581  0B89               	decfsz	9,f
  3158     0582  2D7F               	goto	u965
  3159     0583                     l1451:
  3160     0583  3001               	movlw	1
  3161     0584  00F4               	movwf	??___awmod
  3162     0585  0874               	movf	??___awmod,w
  3163     0586  07F5               	addwf	___awmod@counter,f
  3164     0587                     l1453:
  3165     0587  1FF1               	btfss	___awmod@divisor+1,7
  3166     0588  2D8A               	goto	u971
  3167     0589  2D8B               	goto	u970
  3168     058A                     u971:
  3169     058A  2D7E               	goto	l1449
  3170     058B                     u970:
  3171     058B                     l1455:
  3172     058B  0871               	movf	___awmod@divisor+1,w
  3173     058C  0273               	subwf	___awmod@dividend+1,w
  3174     058D  1D03               	skipz
  3175     058E  2D91               	goto	u985
  3176     058F  0870               	movf	___awmod@divisor,w
  3177     0590  0272               	subwf	___awmod@dividend,w
  3178     0591                     u985:
  3179     0591  1C03               	skipc
  3180     0592  2D94               	goto	u981
  3181     0593  2D95               	goto	u980
  3182     0594                     u981:
  3183     0594  2D99               	goto	l1459
  3184     0595                     u980:
  3185     0595                     l1457:
  3186     0595  0870               	movf	___awmod@divisor,w
  3187     0596  02F2               	subwf	___awmod@dividend,f
  3188     0597  0871               	movf	___awmod@divisor+1,w
  3189     0598  3BF3               	subwfb	___awmod@dividend+1,f
  3190     0599                     l1459:
  3191     0599  3001               	movlw	1
  3192     059A                     u995:
  3193     059A  36F1               	lsrf	___awmod@divisor+1,f
  3194     059B  0CF0               	rrf	___awmod@divisor,f
  3195     059C  0B89               	decfsz	9,f
  3196     059D  2D9A               	goto	u995
  3197     059E                     l1461:
  3198     059E  3001               	movlw	1
  3199     059F  02F5               	subwf	___awmod@counter,f
  3200     05A0  1D03               	btfss	3,2
  3201     05A1  2DA3               	goto	u1001
  3202     05A2  2DA4               	goto	u1000
  3203     05A3                     u1001:
  3204     05A3  2D8B               	goto	l1455
  3205     05A4                     u1000:
  3206     05A4                     l1463:
  3207     05A4  0876               	movf	___awmod@sign,w
  3208     05A5  1903               	btfsc	3,2
  3209     05A6  2DA8               	goto	u1011
  3210     05A7  2DA9               	goto	u1010
  3211     05A8                     u1011:
  3212     05A8  2DAE               	goto	l1467
  3213     05A9                     u1010:
  3214     05A9                     l1465:
  3215     05A9  09F2               	comf	___awmod@dividend,f
  3216     05AA  09F3               	comf	___awmod@dividend+1,f
  3217     05AB  0AF2               	incf	___awmod@dividend,f
  3218     05AC  1903               	skipnz
  3219     05AD  0AF3               	incf	___awmod@dividend+1,f
  3220     05AE                     l1467:
  3221     05AE  0873               	movf	___awmod@dividend+1,w
  3222     05AF  00F1               	movwf	?___awmod+1
  3223     05B0  0872               	movf	___awmod@dividend,w
  3224     05B1  00F0               	movwf	?___awmod
  3225     05B2                     l343:
  3226     05B2  0008               	return
  3227     05B3                     __end_of___awmod:
  3228                           
  3229                           	psect	text13
  3230     0501                     __ptext13:	
  3231 ;; *************** function ___awdiv *****************
  3232 ;; Defined at:
  3233 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awdiv.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  divisor         2    0[COMMON] int 
  3236 ;;  dividend        2    2[COMMON] int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  quotient        2    7[COMMON] int 
  3239 ;;  sign            1    6[COMMON] unsigned char 
  3240 ;;  counter         1    5[COMMON] unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  2    0[COMMON] int 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3250 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;Total ram usage:        9 bytes
  3255 ;; Hardware stack levels used: 1
  3256 ;; Hardware stack levels required when called: 1
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_dtoa
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264     0501                     ___awdiv:	
  3265                           ;psect for function ___awdiv
  3266                           
  3267     0501                     l1389:	
  3268                           ;incstack = 0
  3269                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3270                           
  3271     0501  01F6               	clrf	___awdiv@sign
  3272     0502                     l1391:
  3273     0502  1FF1               	btfss	___awdiv@divisor+1,7
  3274     0503  2D05               	goto	u831
  3275     0504  2D06               	goto	u830
  3276     0505                     u831:
  3277     0505  2D0D               	goto	l1397
  3278     0506                     u830:
  3279     0506                     l1393:
  3280     0506  09F0               	comf	___awdiv@divisor,f
  3281     0507  09F1               	comf	___awdiv@divisor+1,f
  3282     0508  0AF0               	incf	___awdiv@divisor,f
  3283     0509  1903               	skipnz
  3284     050A  0AF1               	incf	___awdiv@divisor+1,f
  3285     050B                     l1395:
  3286     050B  01F6               	clrf	___awdiv@sign
  3287     050C  0AF6               	incf	___awdiv@sign,f
  3288     050D                     l1397:
  3289     050D  1FF3               	btfss	___awdiv@dividend+1,7
  3290     050E  2D10               	goto	u841
  3291     050F  2D11               	goto	u840
  3292     0510                     u841:
  3293     0510  2D1A               	goto	l1403
  3294     0511                     u840:
  3295     0511                     l1399:
  3296     0511  09F2               	comf	___awdiv@dividend,f
  3297     0512  09F3               	comf	___awdiv@dividend+1,f
  3298     0513  0AF2               	incf	___awdiv@dividend,f
  3299     0514  1903               	skipnz
  3300     0515  0AF3               	incf	___awdiv@dividend+1,f
  3301     0516                     l1401:
  3302     0516  3001               	movlw	1
  3303     0517  00F4               	movwf	??___awdiv
  3304     0518  0874               	movf	??___awdiv,w
  3305     0519  06F6               	xorwf	___awdiv@sign,f
  3306     051A                     l1403:
  3307     051A  01F7               	clrf	___awdiv@quotient
  3308     051B  01F8               	clrf	___awdiv@quotient+1
  3309     051C                     l1405:
  3310     051C  0870               	movf	___awdiv@divisor,w
  3311     051D  0471               	iorwf	___awdiv@divisor+1,w
  3312     051E  1903               	btfsc	3,2
  3313     051F  2D21               	goto	u851
  3314     0520  2D22               	goto	u850
  3315     0521                     u851:
  3316     0521  2D51               	goto	l1425
  3317     0522                     u850:
  3318     0522                     l1407:
  3319     0522  01F5               	clrf	___awdiv@counter
  3320     0523  0AF5               	incf	___awdiv@counter,f
  3321     0524  2D2E               	goto	l1413
  3322     0525                     l1409:
  3323     0525  3001               	movlw	1
  3324     0526                     u865:
  3325     0526  35F0               	lslf	___awdiv@divisor,f
  3326     0527  0DF1               	rlf	___awdiv@divisor+1,f
  3327     0528  0B89               	decfsz	9,f
  3328     0529  2D26               	goto	u865
  3329     052A                     l1411:
  3330     052A  3001               	movlw	1
  3331     052B  00F4               	movwf	??___awdiv
  3332     052C  0874               	movf	??___awdiv,w
  3333     052D  07F5               	addwf	___awdiv@counter,f
  3334     052E                     l1413:
  3335     052E  1FF1               	btfss	___awdiv@divisor+1,7
  3336     052F  2D31               	goto	u871
  3337     0530  2D32               	goto	u870
  3338     0531                     u871:
  3339     0531  2D25               	goto	l1409
  3340     0532                     u870:
  3341     0532                     l1415:
  3342     0532  3001               	movlw	1
  3343     0533                     u885:
  3344     0533  35F7               	lslf	___awdiv@quotient,f
  3345     0534  0DF8               	rlf	___awdiv@quotient+1,f
  3346     0535  0B89               	decfsz	9,f
  3347     0536  2D33               	goto	u885
  3348     0537  0871               	movf	___awdiv@divisor+1,w
  3349     0538  0273               	subwf	___awdiv@dividend+1,w
  3350     0539  1D03               	skipz
  3351     053A  2D3D               	goto	u895
  3352     053B  0870               	movf	___awdiv@divisor,w
  3353     053C  0272               	subwf	___awdiv@dividend,w
  3354     053D                     u895:
  3355     053D  1C03               	skipc
  3356     053E  2D40               	goto	u891
  3357     053F  2D41               	goto	u890
  3358     0540                     u891:
  3359     0540  2D46               	goto	l1421
  3360     0541                     u890:
  3361     0541                     l1417:
  3362     0541  0870               	movf	___awdiv@divisor,w
  3363     0542  02F2               	subwf	___awdiv@dividend,f
  3364     0543  0871               	movf	___awdiv@divisor+1,w
  3365     0544  3BF3               	subwfb	___awdiv@dividend+1,f
  3366     0545                     l1419:
  3367     0545  1477               	bsf	___awdiv@quotient,0
  3368     0546                     l1421:
  3369     0546  3001               	movlw	1
  3370     0547                     u905:
  3371     0547  36F1               	lsrf	___awdiv@divisor+1,f
  3372     0548  0CF0               	rrf	___awdiv@divisor,f
  3373     0549  0B89               	decfsz	9,f
  3374     054A  2D47               	goto	u905
  3375     054B                     l1423:
  3376     054B  3001               	movlw	1
  3377     054C  02F5               	subwf	___awdiv@counter,f
  3378     054D  1D03               	btfss	3,2
  3379     054E  2D50               	goto	u911
  3380     054F  2D51               	goto	u910
  3381     0550                     u911:
  3382     0550  2D32               	goto	l1415
  3383     0551                     u910:
  3384     0551                     l1425:
  3385     0551  0876               	movf	___awdiv@sign,w
  3386     0552  1903               	btfsc	3,2
  3387     0553  2D55               	goto	u921
  3388     0554  2D56               	goto	u920
  3389     0555                     u921:
  3390     0555  2D5B               	goto	l1429
  3391     0556                     u920:
  3392     0556                     l1427:
  3393     0556  09F7               	comf	___awdiv@quotient,f
  3394     0557  09F8               	comf	___awdiv@quotient+1,f
  3395     0558  0AF7               	incf	___awdiv@quotient,f
  3396     0559  1903               	skipnz
  3397     055A  0AF8               	incf	___awdiv@quotient+1,f
  3398     055B                     l1429:
  3399     055B  0878               	movf	___awdiv@quotient+1,w
  3400     055C  00F1               	movwf	?___awdiv+1
  3401     055D  0877               	movf	___awdiv@quotient,w
  3402     055E  00F0               	movwf	?___awdiv
  3403     055F                     l330:
  3404     055F  0008               	return
  3405     0560                     __end_of___awdiv:
  3406                           
  3407                           	psect	text14
  3408     0786                     __ptext14:	
  3409 ;; *************** function _TMR0_Timer *****************
  3410 ;; Defined at:
  3411 ;;		line 17 in file "main.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3429 ;;Total ram usage:        0 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; Hardware stack levels required when called: 1
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_main
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439     0786                     _TMR0_Timer:	
  3440                           ;psect for function _TMR0_Timer
  3441                           
  3442     0786                     l1775:	
  3443                           ;incstack = 0
  3444                           ; Regs used in _TMR0_Timer: [wreg]
  3445                           
  3446                           
  3447                           ;main.c: 18:         LATBbits.LATB4 = ! LATBbits.LATB4;
  3448     0786  3006               	movlw	6
  3449     0787  0021               	movlb	1	; select bank1
  3450     0788  0095               	movwf	21	;volatile
  3451                           
  3452                           ;main.c: 19:         TMR0 = 0x7D;
  3453     0789  307D               	movlw	125
  3454     078A  0020               	movlb	0	; select bank0
  3455     078B  0095               	movwf	21	;volatile
  3456     078C                     l1777:
  3457                           
  3458                           ;main.c: 20:         INTCONbits.TMR0IF = 0;
  3459     078C  110B               	bcf	11,2	;volatile
  3460     078D                     l1779:
  3461                           
  3462                           ;main.c: 21:     }
  3463     078D  168B               	bsf	11,5	;volatile
  3464     078E                     l90:
  3465     078E  0008               	return
  3466     078F                     __end_of_TMR0_Timer:
  3467                           
  3468                           	psect	text15
  3469     0648                     __ptext15:	
  3470 ;; *************** function _Lcd_Out2 *****************
  3471 ;; Defined at:
  3472 ;;		line 115 in file "./flex_lcd.h"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  y               1    wreg     unsigned char 
  3475 ;;  x               1    3[COMMON] unsigned char 
  3476 ;;  buffer          2    4[COMMON] PTR unsigned char 
  3477 ;;		 -> STR_4(12), buffer2(20), buffer1(20), 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  y               1    8[COMMON] unsigned char 
  3480 ;;  data            1    9[COMMON] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3490 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3491 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3494 ;;Total ram usage:        7 bytes
  3495 ;; Hardware stack levels used: 1
  3496 ;; Hardware stack levels required when called: 2
  3497 ;; This function calls:
  3498 ;;		_Lcd_Chr_CP
  3499 ;;		_Lcd_Cmd
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505     0648                     _Lcd_Out2:	
  3506                           ;psect for function _Lcd_Out2
  3507                           
  3508                           
  3509                           ;incstack = 0
  3510                           ; Regs used in _Lcd_Out2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3511                           ;Lcd_Out2@y stored from wreg
  3512     0648  00F8               	movwf	Lcd_Out2@y
  3513     0649                     l1749:
  3514                           
  3515                           ;./flex_lcd.h: 115: void Lcd_Out2(unsigned char y, unsigned char x, char *buffer);./flex
      +                          _lcd.h: 116: {;./flex_lcd.h: 117: unsigned char data;;./flex_lcd.h: 118: switch (y)
  3516     0649  2E5A               	goto	l1761
  3517     064A                     l1751:
  3518     064A  0873               	movf	Lcd_Out2@x,w
  3519     064B  3E80               	addlw	128
  3520     064C  00F9               	movwf	Lcd_Out2@data
  3521     064D  2E70               	goto	l1763
  3522     064E                     l1753:
  3523     064E  0873               	movf	Lcd_Out2@x,w
  3524     064F  3EC0               	addlw	192
  3525     0650  00F9               	movwf	Lcd_Out2@data
  3526     0651  2E70               	goto	l1763
  3527     0652                     l1755:
  3528     0652  0873               	movf	Lcd_Out2@x,w
  3529     0653  3E94               	addlw	148
  3530     0654  00F9               	movwf	Lcd_Out2@data
  3531     0655  2E70               	goto	l1763
  3532     0656                     l1757:
  3533     0656  0873               	movf	Lcd_Out2@x,w
  3534     0657  3ED4               	addlw	212
  3535     0658  00F9               	movwf	Lcd_Out2@data
  3536     0659  2E70               	goto	l1763
  3537     065A                     l1761:
  3538     065A  0878               	movf	Lcd_Out2@y,w
  3539     065B  00F6               	movwf	??_Lcd_Out2
  3540     065C  01F7               	clrf	??_Lcd_Out2+1
  3541                           
  3542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3543                           ; Switch size 1, requested type "simple"
  3544                           ; Number of cases is 1, Range of values is 0 to 0
  3545                           ; switch strategies available:
  3546                           ; Name         Instructions Cycles
  3547                           ; simple_byte            4     3 (average)
  3548                           ; direct_byte            8     6 (fixed)
  3549                           ; jumptable            260     6 (fixed)
  3550                           ;	Chosen strategy is simple_byte
  3551     065D  0877               	movf	??_Lcd_Out2+1,w
  3552     065E  3A00               	xorlw	0	; case 0
  3553     065F  1903               	skipnz
  3554     0660  2E62               	goto	l1943
  3555     0661  2E70               	goto	l1763
  3556     0662                     l1943:
  3557                           
  3558                           ; Switch size 1, requested type "simple"
  3559                           ; Number of cases is 4, Range of values is 1 to 4
  3560                           ; switch strategies available:
  3561                           ; Name         Instructions Cycles
  3562                           ; simple_byte           13     7 (average)
  3563                           ; direct_byte           17     9 (fixed)
  3564                           ; jumptable            263     9 (fixed)
  3565                           ;	Chosen strategy is simple_byte
  3566     0662  0876               	movf	??_Lcd_Out2,w
  3567     0663  3A01               	xorlw	1	; case 1
  3568     0664  1903               	skipnz
  3569     0665  2E4A               	goto	l1751
  3570     0666  3A03               	xorlw	3	; case 2
  3571     0667  1903               	skipnz
  3572     0668  2E4E               	goto	l1753
  3573     0669  3A01               	xorlw	1	; case 3
  3574     066A  1903               	skipnz
  3575     066B  2E52               	goto	l1755
  3576     066C  3A07               	xorlw	7	; case 4
  3577     066D  1903               	skipnz
  3578     066E  2E56               	goto	l1757
  3579     066F  2E70               	goto	l1763
  3580     0670                     l1763:
  3581                           
  3582                           ;./flex_lcd.h: 126: Lcd_Cmd(data);
  3583     0670  0879               	movf	Lcd_Out2@data,w
  3584     0671  3184  240E  3186   	fcall	_Lcd_Cmd
  3585                           
  3586                           ;./flex_lcd.h: 127: while(*buffer)
  3587     0674  2E81               	goto	l1769
  3588     0675                     l1765:
  3589                           
  3590                           ;./flex_lcd.h: 128: {;./flex_lcd.h: 129:     Lcd_Chr_CP(*buffer);
  3591     0675  0874               	movf	Lcd_Out2@buffer,w
  3592     0676  0084               	movwf	4
  3593     0677  0875               	movf	Lcd_Out2@buffer+1,w
  3594     0678  0085               	movwf	5
  3595     0679  0800               	movf	0,w	;code access
  3596     067A  3183  2378  3186   	fcall	_Lcd_Chr_CP
  3597     067D                     l1767:
  3598                           
  3599                           ;./flex_lcd.h: 130:     buffer++;
  3600     067D  3001               	movlw	1
  3601     067E  07F4               	addwf	Lcd_Out2@buffer,f
  3602     067F  3000               	movlw	0
  3603     0680  3DF5               	addwfc	Lcd_Out2@buffer+1,f
  3604     0681                     l1769:
  3605                           
  3606                           ;./flex_lcd.h: 127: while(*buffer)
  3607     0681  0874               	movf	Lcd_Out2@buffer,w
  3608     0682  0084               	movwf	4
  3609     0683  0875               	movf	Lcd_Out2@buffer+1,w
  3610     0684  0085               	movwf	5
  3611     0685  0012               	moviw fsr0++
  3612     0686  1D03               	btfss	3,2
  3613     0687  2E89               	goto	u1421
  3614     0688  2E8A               	goto	u1420
  3615     0689                     u1421:
  3616     0689  2E75               	goto	l1765
  3617     068A                     u1420:
  3618     068A                     l75:
  3619     068A  0008               	return
  3620     068B                     __end_of_Lcd_Out2:
  3621                           
  3622                           	psect	text16
  3623     068B                     __ptext16:	
  3624 ;; *************** function _Lcd_Out *****************
  3625 ;; Defined at:
  3626 ;;		line 94 in file "./flex_lcd.h"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  y               1    wreg     unsigned char 
  3629 ;;  x               1    3[COMMON] unsigned char 
  3630 ;;  buffer          2    4[COMMON] PTR const unsigned char 
  3631 ;;		 -> STR_6(6), STR_5(7), 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  y               1    8[COMMON] unsigned char 
  3634 ;;  data            1    9[COMMON] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      void 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3644 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3645 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3648 ;;Total ram usage:        7 bytes
  3649 ;; Hardware stack levels used: 1
  3650 ;; Hardware stack levels required when called: 2
  3651 ;; This function calls:
  3652 ;;		_Lcd_Chr_CP
  3653 ;;		_Lcd_Cmd
  3654 ;; This function is called by:
  3655 ;;		_main
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659     068B                     _Lcd_Out:	
  3660                           ;psect for function _Lcd_Out
  3661                           
  3662                           
  3663                           ;incstack = 0
  3664                           ; Regs used in _Lcd_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3665                           ;Lcd_Out@y stored from wreg
  3666     068B  00F8               	movwf	Lcd_Out@y
  3667     068C                     l1723:
  3668                           
  3669                           ;./flex_lcd.h: 94: void Lcd_Out(unsigned char y, unsigned char x, const char *buffer);./
      +                          flex_lcd.h: 95: {;./flex_lcd.h: 96: unsigned char data;;./flex_lcd.h: 97: switch (y)
  3670     068C  2E9D               	goto	l1735
  3671     068D                     l1725:
  3672     068D  0873               	movf	Lcd_Out@x,w
  3673     068E  3E80               	addlw	128
  3674     068F  00F9               	movwf	Lcd_Out@data
  3675     0690  2EB3               	goto	l1737
  3676     0691                     l1727:
  3677     0691  0873               	movf	Lcd_Out@x,w
  3678     0692  3EC0               	addlw	192
  3679     0693  00F9               	movwf	Lcd_Out@data
  3680     0694  2EB3               	goto	l1737
  3681     0695                     l1729:
  3682     0695  0873               	movf	Lcd_Out@x,w
  3683     0696  3E94               	addlw	148
  3684     0697  00F9               	movwf	Lcd_Out@data
  3685     0698  2EB3               	goto	l1737
  3686     0699                     l1731:
  3687     0699  0873               	movf	Lcd_Out@x,w
  3688     069A  3ED4               	addlw	212
  3689     069B  00F9               	movwf	Lcd_Out@data
  3690     069C  2EB3               	goto	l1737
  3691     069D                     l1735:
  3692     069D  0878               	movf	Lcd_Out@y,w
  3693     069E  00F6               	movwf	??_Lcd_Out
  3694     069F  01F7               	clrf	??_Lcd_Out+1
  3695                           
  3696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3697                           ; Switch size 1, requested type "simple"
  3698                           ; Number of cases is 1, Range of values is 0 to 0
  3699                           ; switch strategies available:
  3700                           ; Name         Instructions Cycles
  3701                           ; simple_byte            4     3 (average)
  3702                           ; direct_byte            8     6 (fixed)
  3703                           ; jumptable            260     6 (fixed)
  3704                           ;	Chosen strategy is simple_byte
  3705     06A0  0877               	movf	??_Lcd_Out+1,w
  3706     06A1  3A00               	xorlw	0	; case 0
  3707     06A2  1903               	skipnz
  3708     06A3  2EA5               	goto	l1945
  3709     06A4  2EB3               	goto	l1737
  3710     06A5                     l1945:
  3711                           
  3712                           ; Switch size 1, requested type "simple"
  3713                           ; Number of cases is 4, Range of values is 1 to 4
  3714                           ; switch strategies available:
  3715                           ; Name         Instructions Cycles
  3716                           ; simple_byte           13     7 (average)
  3717                           ; direct_byte           17     9 (fixed)
  3718                           ; jumptable            263     9 (fixed)
  3719                           ;	Chosen strategy is simple_byte
  3720     06A5  0876               	movf	??_Lcd_Out,w
  3721     06A6  3A01               	xorlw	1	; case 1
  3722     06A7  1903               	skipnz
  3723     06A8  2E8D               	goto	l1725
  3724     06A9  3A03               	xorlw	3	; case 2
  3725     06AA  1903               	skipnz
  3726     06AB  2E91               	goto	l1727
  3727     06AC  3A01               	xorlw	1	; case 3
  3728     06AD  1903               	skipnz
  3729     06AE  2E95               	goto	l1729
  3730     06AF  3A07               	xorlw	7	; case 4
  3731     06B0  1903               	skipnz
  3732     06B1  2E99               	goto	l1731
  3733     06B2  2EB3               	goto	l1737
  3734     06B3                     l1737:
  3735                           
  3736                           ;./flex_lcd.h: 105: Lcd_Cmd(data);
  3737     06B3  0879               	movf	Lcd_Out@data,w
  3738     06B4  3184  240E  3186   	fcall	_Lcd_Cmd
  3739                           
  3740                           ;./flex_lcd.h: 106: while(*buffer)
  3741     06B7  2EC4               	goto	l1743
  3742     06B8                     l1739:
  3743                           
  3744                           ;./flex_lcd.h: 107: {;./flex_lcd.h: 108:     Lcd_Chr_CP(*buffer);
  3745     06B8  0874               	movf	Lcd_Out@buffer,w
  3746     06B9  0084               	movwf	4
  3747     06BA  0875               	movf	Lcd_Out@buffer+1,w
  3748     06BB  0085               	movwf	5
  3749     06BC  0800               	movf	0,w	;code access
  3750     06BD  3183  2378  3186   	fcall	_Lcd_Chr_CP
  3751     06C0                     l1741:
  3752                           
  3753                           ;./flex_lcd.h: 109:     buffer++;
  3754     06C0  3001               	movlw	1
  3755     06C1  07F4               	addwf	Lcd_Out@buffer,f
  3756     06C2  3000               	movlw	0
  3757     06C3  3DF5               	addwfc	Lcd_Out@buffer+1,f
  3758     06C4                     l1743:
  3759                           
  3760                           ;./flex_lcd.h: 106: while(*buffer)
  3761     06C4  0874               	movf	Lcd_Out@buffer,w
  3762     06C5  0084               	movwf	4
  3763     06C6  0875               	movf	Lcd_Out@buffer+1,w
  3764     06C7  0085               	movwf	5
  3765     06C8  0012               	moviw fsr0++
  3766     06C9  1D03               	btfss	3,2
  3767     06CA  2ECC               	goto	u1411
  3768     06CB  2ECD               	goto	u1410
  3769     06CC                     u1411:
  3770     06CC  2EB8               	goto	l1739
  3771     06CD                     u1410:
  3772     06CD                     l62:
  3773     06CD  0008               	return
  3774     06CE                     __end_of_Lcd_Out:
  3775                           
  3776                           	psect	text17
  3777     0378                     __ptext17:	
  3778 ;; *************** function _Lcd_Chr_CP *****************
  3779 ;; Defined at:
  3780 ;;		line 136 in file "./flex_lcd.h"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;  data            1    wreg     unsigned char 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  data            1    2[COMMON] unsigned char 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3797 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3798 ;;Total ram usage:        3 bytes
  3799 ;; Hardware stack levels used: 1
  3800 ;; Hardware stack levels required when called: 1
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_Lcd_Out
  3805 ;;		_Lcd_Out2
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809     0378                     _Lcd_Chr_CP:	
  3810                           ;psect for function _Lcd_Chr_CP
  3811                           
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  3815                           ;Lcd_Chr_CP@data stored from wreg
  3816     0378  00F2               	movwf	Lcd_Chr_CP@data
  3817     0379                     l1655:
  3818                           
  3819                           ;./flex_lcd.h: 137: PORTCbits.RC4 = 0; PORTCbits.RC5 = 1;
  3820     0379  0020               	movlb	0	; select bank0
  3821     037A  120E               	bcf	14,4	;volatile
  3822     037B  168E               	bsf	14,5	;volatile
  3823     037C                     l1657:
  3824                           
  3825                           ;./flex_lcd.h: 138: PORTCbits.RC0 = (data & 0b10000000)>>7; PORTCbits.RC1 = (data & 0b01
      +                          000000)>>6;
  3826     037C  0872               	movf	Lcd_Chr_CP@data,w
  3827     037D  00F0               	movwf	??_Lcd_Chr_CP
  3828     037E  3007               	movlw	7
  3829     037F                     u1335:
  3830     037F  36F0               	lsrf	??_Lcd_Chr_CP,f
  3831     0380  0B89               	decfsz	9,f
  3832     0381  2B7F               	goto	u1335
  3833     0382  3001               	movlw	1
  3834     0383  0570               	andwf	??_Lcd_Chr_CP,w
  3835     0384  00F1               	movwf	??_Lcd_Chr_CP+1
  3836     0385  080E               	movf	14,w	;volatile
  3837     0386  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3838     0387  39FE               	andlw	-2
  3839     0388  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3840     0389  008E               	movwf	14	;volatile
  3841     038A  0872               	movf	Lcd_Chr_CP@data,w
  3842     038B  00F0               	movwf	??_Lcd_Chr_CP
  3843     038C  3006               	movlw	6
  3844     038D                     u1345:
  3845     038D  36F0               	lsrf	??_Lcd_Chr_CP,f
  3846     038E  0B89               	decfsz	9,f
  3847     038F  2B8D               	goto	u1345
  3848     0390  0870               	movf	??_Lcd_Chr_CP,w
  3849     0391  3901               	andlw	1
  3850     0392  00F1               	movwf	??_Lcd_Chr_CP+1
  3851     0393  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3852     0394  080E               	movf	14,w	;volatile
  3853     0395  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3854     0396  39FD               	andlw	-3
  3855     0397  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3856     0398  008E               	movwf	14	;volatile
  3857                           
  3858                           ;./flex_lcd.h: 139: PORTCbits.RC2 = (data & 0b00100000)>>5; PORTCbits.RC3 = (data & 0b00
      +                          010000)>>4;
  3859     0399  0872               	movf	Lcd_Chr_CP@data,w
  3860     039A  00F0               	movwf	??_Lcd_Chr_CP
  3861     039B  3005               	movlw	5
  3862     039C                     u1355:
  3863     039C  36F0               	lsrf	??_Lcd_Chr_CP,f
  3864     039D  0B89               	decfsz	9,f
  3865     039E  2B9C               	goto	u1355
  3866     039F  0870               	movf	??_Lcd_Chr_CP,w
  3867     03A0  3901               	andlw	1
  3868     03A1  00F1               	movwf	??_Lcd_Chr_CP+1
  3869     03A2  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3870     03A3  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3871     03A4  080E               	movf	14,w	;volatile
  3872     03A5  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3873     03A6  39FB               	andlw	-5
  3874     03A7  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3875     03A8  008E               	movwf	14	;volatile
  3876     03A9  0872               	movf	Lcd_Chr_CP@data,w
  3877     03AA  00F0               	movwf	??_Lcd_Chr_CP
  3878     03AB  3004               	movlw	4
  3879     03AC                     u1365:
  3880     03AC  36F0               	lsrf	??_Lcd_Chr_CP,f
  3881     03AD  0B89               	decfsz	9,f
  3882     03AE  2BAC               	goto	u1365
  3883     03AF  0870               	movf	??_Lcd_Chr_CP,w
  3884     03B0  3901               	andlw	1
  3885     03B1  00F1               	movwf	??_Lcd_Chr_CP+1
  3886     03B2  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3887     03B3  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3888     03B4  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3889     03B5  080E               	movf	14,w	;volatile
  3890     03B6  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3891     03B7  39F7               	andlw	-9
  3892     03B8  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3893     03B9  008E               	movwf	14	;volatile
  3894     03BA                     l1659:
  3895                           
  3896                           ;./flex_lcd.h: 140: _delay(10);
  3897     03BA  3003               	movlw	3
  3898     03BB                     u1527:
  3899     03BB  0B89               	decfsz	9,f
  3900     03BC  2BBB               	goto	u1527
  3901     03BD  0000               	nop
  3902     03BE                     l1661:
  3903                           
  3904                           ;./flex_lcd.h: 141: PORTCbits.RC4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0)));
      +                           PORTCbits.RC4 = 0;
  3905     03BE  0020               	movlb	0	; select bank0
  3906     03BF  160E               	bsf	14,4	;volatile
  3907     03C0                     l1663:
  3908     03C0  3200               	nop2	;2 cycle nop
  3909     03C1  3200               	nop2	;2 cycle nop
  3910     03C2  0000               	nop
  3911     03C3                     l1665:
  3912     03C3  0020               	movlb	0	; select bank0
  3913     03C4  120E               	bcf	14,4	;volatile
  3914     03C5                     l1667:
  3915                           
  3916                           ;./flex_lcd.h: 142: PORTCbits.RC0 = (data & 0b00001000)>>3; PORTCbits.RC1 = (data & 0b00
      +                          000100)>>2;
  3917     03C5  0872               	movf	Lcd_Chr_CP@data,w
  3918     03C6  00F0               	movwf	??_Lcd_Chr_CP
  3919     03C7  3003               	movlw	3
  3920     03C8                     u1375:
  3921     03C8  36F0               	lsrf	??_Lcd_Chr_CP,f
  3922     03C9  0B89               	decfsz	9,f
  3923     03CA  2BC8               	goto	u1375
  3924     03CB  3001               	movlw	1
  3925     03CC  0570               	andwf	??_Lcd_Chr_CP,w
  3926     03CD  00F1               	movwf	??_Lcd_Chr_CP+1
  3927     03CE  080E               	movf	14,w	;volatile
  3928     03CF  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3929     03D0  39FE               	andlw	-2
  3930     03D1  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3931     03D2  008E               	movwf	14	;volatile
  3932     03D3                     l1669:
  3933     03D3  0872               	movf	Lcd_Chr_CP@data,w
  3934     03D4  00F0               	movwf	??_Lcd_Chr_CP
  3935     03D5  3002               	movlw	2
  3936     03D6                     u1385:
  3937     03D6  36F0               	lsrf	??_Lcd_Chr_CP,f
  3938     03D7  0B89               	decfsz	9,f
  3939     03D8  2BD6               	goto	u1385
  3940     03D9  0870               	movf	??_Lcd_Chr_CP,w
  3941     03DA  3901               	andlw	1
  3942     03DB  00F1               	movwf	??_Lcd_Chr_CP+1
  3943     03DC  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3944     03DD  080E               	movf	14,w	;volatile
  3945     03DE  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3946     03DF  39FD               	andlw	-3
  3947     03E0  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3948     03E1  008E               	movwf	14	;volatile
  3949     03E2                     l1671:
  3950                           
  3951                           ;./flex_lcd.h: 143: PORTCbits.RC2 = (data & 0b00000010)>>1; PORTCbits.RC3 = (data & 0b00
      +                          000001);
  3952     03E2  3672               	lsrf	Lcd_Chr_CP@data,w
  3953     03E3  3901               	andlw	1
  3954     03E4  00F0               	movwf	??_Lcd_Chr_CP
  3955     03E5  0DF0               	rlf	??_Lcd_Chr_CP,f
  3956     03E6  0DF0               	rlf	??_Lcd_Chr_CP,f
  3957     03E7  080E               	movf	14,w	;volatile
  3958     03E8  0670               	xorwf	??_Lcd_Chr_CP,w
  3959     03E9  39FB               	andlw	-5
  3960     03EA  0670               	xorwf	??_Lcd_Chr_CP,w
  3961     03EB  008E               	movwf	14	;volatile
  3962     03EC                     l1673:
  3963     03EC  0872               	movf	Lcd_Chr_CP@data,w
  3964     03ED  3901               	andlw	1
  3965     03EE  00F0               	movwf	??_Lcd_Chr_CP
  3966     03EF  0DF0               	rlf	??_Lcd_Chr_CP,f
  3967     03F0  0DF0               	rlf	??_Lcd_Chr_CP,f
  3968     03F1  0DF0               	rlf	??_Lcd_Chr_CP,f
  3969     03F2  080E               	movf	14,w	;volatile
  3970     03F3  0670               	xorwf	??_Lcd_Chr_CP,w
  3971     03F4  39F7               	andlw	-9
  3972     03F5  0670               	xorwf	??_Lcd_Chr_CP,w
  3973     03F6  008E               	movwf	14	;volatile
  3974     03F7                     l1675:
  3975                           
  3976                           ;./flex_lcd.h: 144: _delay(10);
  3977     03F7  3003               	movlw	3
  3978     03F8                     u1537:
  3979     03F8  0B89               	decfsz	9,f
  3980     03F9  2BF8               	goto	u1537
  3981     03FA  0000               	nop
  3982     03FB                     l1677:
  3983                           
  3984                           ;./flex_lcd.h: 145: PORTCbits.RC4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0)));
      +                           PORTCbits.RC4 = 0;
  3985     03FB  0020               	movlb	0	; select bank0
  3986     03FC  160E               	bsf	14,4	;volatile
  3987     03FD                     l1679:
  3988     03FD  3200               	nop2	;2 cycle nop
  3989     03FE  3200               	nop2	;2 cycle nop
  3990     03FF  0000               	nop
  3991     0400                     l1681:
  3992     0400  0020               	movlb	0	; select bank0
  3993     0401  120E               	bcf	14,4	;volatile
  3994     0402                     l1683:
  3995                           
  3996                           ;./flex_lcd.h: 146: _delay((unsigned long)((5)*(4000000/4000000.0))); _delay((unsigned l
      +                          ong)((5500)*(4000000/4000000.0)));
  3997     0402  3200               	nop2	;2 cycle nop
  3998     0403  3200               	nop2	;2 cycle nop
  3999     0404  0000               	nop
  4000     0405                     l1685:
  4001     0405  3008               	movlw	8
  4002     0406  00F0               	movwf	??_Lcd_Chr_CP
  4003     0407  3023               	movlw	35
  4004     0408                     u1547:
  4005     0408  0B89               	decfsz	9,f
  4006     0409  2C08               	goto	u1547
  4007     040A  0BF0               	decfsz	??_Lcd_Chr_CP,f
  4008     040B  2C08               	goto	u1547
  4009     040C  0000               	nop
  4010     040D                     l78:
  4011     040D  0008               	return
  4012     040E                     __end_of_Lcd_Chr_CP:
  4013                           
  4014                           	psect	text18
  4015     02DF                     __ptext18:	
  4016 ;; *************** function _Lcd_Init *****************
  4017 ;; Defined at:
  4018 ;;		line 52 in file "./flex_lcd.h"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  data            1    4[COMMON] unsigned char 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4036 ;;Total ram usage:        2 bytes
  4037 ;; Hardware stack levels used: 1
  4038 ;; Hardware stack levels required when called: 2
  4039 ;; This function calls:
  4040 ;;		_Lcd_Cmd
  4041 ;; This function is called by:
  4042 ;;		_main
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046     02DF                     _Lcd_Init:	
  4047                           ;psect for function _Lcd_Init
  4048                           
  4049     02DF                     l1697:	
  4050                           ;incstack = 0
  4051                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4052                           
  4053                           
  4054                           ;./flex_lcd.h: 53: unsigned char data;;./flex_lcd.h: 54: TRISCbits.TRISC0 = 0;
  4055     02DF  0021               	movlb	1	; select bank1
  4056     02E0  100E               	bcf	14,0	;volatile
  4057                           
  4058                           ;./flex_lcd.h: 55: TRISCbits.TRISC1 = 0;
  4059     02E1  108E               	bcf	14,1	;volatile
  4060                           
  4061                           ;./flex_lcd.h: 56: TRISCbits.TRISC2 = 0;
  4062     02E2  110E               	bcf	14,2	;volatile
  4063                           
  4064                           ;./flex_lcd.h: 57: TRISCbits.TRISC3 = 0;
  4065     02E3  118E               	bcf	14,3	;volatile
  4066                           
  4067                           ;./flex_lcd.h: 58: TRISCbits.TRISC4 = 0;
  4068     02E4  120E               	bcf	14,4	;volatile
  4069                           
  4070                           ;./flex_lcd.h: 59: TRISCbits.TRISC5 = 0;
  4071     02E5  128E               	bcf	14,5	;volatile
  4072                           
  4073                           ;./flex_lcd.h: 60: PORTCbits.RC0 = 0;
  4074     02E6  0020               	movlb	0	; select bank0
  4075     02E7  100E               	bcf	14,0	;volatile
  4076                           
  4077                           ;./flex_lcd.h: 61: PORTCbits.RC1 = 0;
  4078     02E8  108E               	bcf	14,1	;volatile
  4079                           
  4080                           ;./flex_lcd.h: 62: PORTCbits.RC2 = 0;
  4081     02E9  110E               	bcf	14,2	;volatile
  4082                           
  4083                           ;./flex_lcd.h: 63: PORTCbits.RC3 = 0;
  4084     02EA  118E               	bcf	14,3	;volatile
  4085                           
  4086                           ;./flex_lcd.h: 64: PORTCbits.RC4 = 0;
  4087     02EB  120E               	bcf	14,4	;volatile
  4088                           
  4089                           ;./flex_lcd.h: 65: PORTCbits.RC5 = 0;
  4090     02EC  128E               	bcf	14,5	;volatile
  4091     02ED                     l1699:
  4092                           
  4093                           ;./flex_lcd.h: 66: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4094     02ED  3008               	movlw	8
  4095     02EE  00F3               	movwf	??_Lcd_Init
  4096     02EF  3023               	movlw	35
  4097     02F0                     u1557:
  4098     02F0  0B89               	decfsz	9,f
  4099     02F1  2AF0               	goto	u1557
  4100     02F2  0BF3               	decfsz	??_Lcd_Init,f
  4101     02F3  2AF0               	goto	u1557
  4102     02F4  0000               	nop
  4103                           
  4104                           ;./flex_lcd.h: 67: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4105     02F5  3008               	movlw	8
  4106     02F6  00F3               	movwf	??_Lcd_Init
  4107     02F7  3023               	movlw	35
  4108     02F8                     u1567:
  4109     02F8  0B89               	decfsz	9,f
  4110     02F9  2AF8               	goto	u1567
  4111     02FA  0BF3               	decfsz	??_Lcd_Init,f
  4112     02FB  2AF8               	goto	u1567
  4113     02FC  0000               	nop
  4114                           
  4115                           ;./flex_lcd.h: 68: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4116     02FD  3008               	movlw	8
  4117     02FE  00F3               	movwf	??_Lcd_Init
  4118     02FF  3023               	movlw	35
  4119     0300                     u1577:
  4120     0300  0B89               	decfsz	9,f
  4121     0301  2B00               	goto	u1577
  4122     0302  0BF3               	decfsz	??_Lcd_Init,f
  4123     0303  2B00               	goto	u1577
  4124     0304  0000               	nop
  4125                           
  4126                           ;./flex_lcd.h: 69: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4127     0305  3008               	movlw	8
  4128     0306  00F3               	movwf	??_Lcd_Init
  4129     0307  3023               	movlw	35
  4130     0308                     u1587:
  4131     0308  0B89               	decfsz	9,f
  4132     0309  2B08               	goto	u1587
  4133     030A  0BF3               	decfsz	??_Lcd_Init,f
  4134     030B  2B08               	goto	u1587
  4135     030C  0000               	nop
  4136                           
  4137                           ;./flex_lcd.h: 70: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4138     030D  3008               	movlw	8
  4139     030E  00F3               	movwf	??_Lcd_Init
  4140     030F  3023               	movlw	35
  4141     0310                     u1597:
  4142     0310  0B89               	decfsz	9,f
  4143     0311  2B10               	goto	u1597
  4144     0312  0BF3               	decfsz	??_Lcd_Init,f
  4145     0313  2B10               	goto	u1597
  4146     0314  0000               	nop
  4147                           
  4148                           ;./flex_lcd.h: 71: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4149     0315  3008               	movlw	8
  4150     0316  00F3               	movwf	??_Lcd_Init
  4151     0317  3023               	movlw	35
  4152     0318                     u1607:
  4153     0318  0B89               	decfsz	9,f
  4154     0319  2B18               	goto	u1607
  4155     031A  0BF3               	decfsz	??_Lcd_Init,f
  4156     031B  2B18               	goto	u1607
  4157     031C  0000               	nop
  4158     031D                     l1701:
  4159                           
  4160                           ;./flex_lcd.h: 72: for(data = 1; data < 4; data ++)
  4161     031D  01F4               	clrf	Lcd_Init@data
  4162     031E  0AF4               	incf	Lcd_Init@data,f
  4163     031F                     l47:
  4164                           
  4165                           ;./flex_lcd.h: 73: {;./flex_lcd.h: 74:     PORTCbits.RC0 = 0; PORTCbits.RC1 = 0; PORTCbi
      +                          ts.RC2 = 1; PORTCbits.RC3 = 1; PORTCbits.RC4 = 0;
  4166     031F  0020               	movlb	0	; select bank0
  4167     0320  100E               	bcf	14,0	;volatile
  4168     0321  108E               	bcf	14,1	;volatile
  4169     0322  150E               	bsf	14,2	;volatile
  4170     0323  158E               	bsf	14,3	;volatile
  4171     0324  120E               	bcf	14,4	;volatile
  4172                           
  4173                           ;./flex_lcd.h: 75:     PORTCbits.RC5 = 0; PORTCbits.RC0 = 0; PORTCbits.RC1 = 0; PORTCbit
      +                          s.RC2 = 1; PORTCbits.RC3 = 1;
  4174     0325  128E               	bcf	14,5	;volatile
  4175     0326  100E               	bcf	14,0	;volatile
  4176     0327  108E               	bcf	14,1	;volatile
  4177     0328  150E               	bsf	14,2	;volatile
  4178     0329  158E               	bsf	14,3	;volatile
  4179                           
  4180                           ;./flex_lcd.h: 76:     PORTCbits.RC4 = 1; PORTCbits.RC5 = 0;
  4181     032A  160E               	bsf	14,4	;volatile
  4182     032B  128E               	bcf	14,5	;volatile
  4183                           
  4184                           ;./flex_lcd.h: 77:     _delay((unsigned long)((5)*(4000000/4000000.0)));
  4185     032C  3200               	nop2	;2 cycle nop
  4186     032D  3200               	nop2	;2 cycle nop
  4187     032E  0000               	nop
  4188                           
  4189                           ;./flex_lcd.h: 78:     PORTCbits.RC0 = 0; PORTCbits.RC1 = 0; PORTCbits.RC2 = 1; PORTCbit
      +                          s.RC3 = 1; PORTCbits.RC4 = 0;
  4190     032F  0020               	movlb	0	; select bank0
  4191     0330  100E               	bcf	14,0	;volatile
  4192     0331  108E               	bcf	14,1	;volatile
  4193     0332  150E               	bsf	14,2	;volatile
  4194     0333  158E               	bsf	14,3	;volatile
  4195     0334  120E               	bcf	14,4	;volatile
  4196                           
  4197                           ;./flex_lcd.h: 79:     PORTCbits.RC5 = 0;
  4198     0335  128E               	bcf	14,5	;volatile
  4199     0336                     l1705:
  4200                           
  4201                           ;./flex_lcd.h: 80:     _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4202     0336  3008               	movlw	8
  4203     0337  00F3               	movwf	??_Lcd_Init
  4204     0338  3023               	movlw	35
  4205     0339                     u1617:
  4206     0339  0B89               	decfsz	9,f
  4207     033A  2B39               	goto	u1617
  4208     033B  0BF3               	decfsz	??_Lcd_Init,f
  4209     033C  2B39               	goto	u1617
  4210     033D  0000               	nop
  4211     033E                     l1707:
  4212                           
  4213                           ;./flex_lcd.h: 81: }
  4214     033E  3001               	movlw	1
  4215     033F  00F3               	movwf	??_Lcd_Init
  4216     0340  0873               	movf	??_Lcd_Init,w
  4217     0341  07F4               	addwf	Lcd_Init@data,f
  4218     0342                     l1709:
  4219     0342  3004               	movlw	4
  4220     0343  0274               	subwf	Lcd_Init@data,w
  4221     0344  1C03               	skipc
  4222     0345  2B47               	goto	u1401
  4223     0346  2B48               	goto	u1400
  4224     0347                     u1401:
  4225     0347  2B1F               	goto	l47
  4226     0348                     u1400:
  4227     0348                     l48:
  4228                           
  4229                           ;./flex_lcd.h: 82: PORTCbits.RC0 = 0; PORTCbits.RC1 = 0; PORTCbits.RC2 = 1; PORTCbits.RC
      +                          3 = 0; PORTCbits.RC4 = 0; PORTCbits.RC5 = 0;
  4230     0348  0020               	movlb	0	; select bank0
  4231     0349  100E               	bcf	14,0	;volatile
  4232     034A  108E               	bcf	14,1	;volatile
  4233     034B  150E               	bsf	14,2	;volatile
  4234     034C  118E               	bcf	14,3	;volatile
  4235     034D  120E               	bcf	14,4	;volatile
  4236     034E  128E               	bcf	14,5	;volatile
  4237                           
  4238                           ;./flex_lcd.h: 83: PORTCbits.RC0 = 0; PORTCbits.RC1 = 0; PORTCbits.RC2 = 1; PORTCbits.RC
      +                          3 = 0; PORTCbits.RC4 = 1; PORTCbits.RC5 = 0;
  4239     034F  100E               	bcf	14,0	;volatile
  4240     0350  108E               	bcf	14,1	;volatile
  4241     0351  150E               	bsf	14,2	;volatile
  4242     0352  118E               	bcf	14,3	;volatile
  4243     0353  160E               	bsf	14,4	;volatile
  4244     0354  128E               	bcf	14,5	;volatile
  4245                           
  4246                           ;./flex_lcd.h: 84: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4247     0355  3200               	nop2	;2 cycle nop
  4248     0356  3200               	nop2	;2 cycle nop
  4249     0357  0000               	nop
  4250                           
  4251                           ;./flex_lcd.h: 85: PORTCbits.RC0 = 0; PORTCbits.RC1 = 0; PORTCbits.RC2 = 1; PORTCbits.RC
      +                          3 = 0; PORTCbits.RC4 = 0; PORTCbits.RC5 = 0;
  4252     0358  0020               	movlb	0	; select bank0
  4253     0359  100E               	bcf	14,0	;volatile
  4254     035A  108E               	bcf	14,1	;volatile
  4255     035B  150E               	bsf	14,2	;volatile
  4256     035C  118E               	bcf	14,3	;volatile
  4257     035D  120E               	bcf	14,4	;volatile
  4258     035E  128E               	bcf	14,5	;volatile
  4259     035F                     l1711:
  4260                           
  4261                           ;./flex_lcd.h: 86: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4262     035F  3008               	movlw	8
  4263     0360  00F3               	movwf	??_Lcd_Init
  4264     0361  3023               	movlw	35
  4265     0362                     u1627:
  4266     0362  0B89               	decfsz	9,f
  4267     0363  2B62               	goto	u1627
  4268     0364  0BF3               	decfsz	??_Lcd_Init,f
  4269     0365  2B62               	goto	u1627
  4270     0366  0000               	nop
  4271     0367                     l1713:
  4272     0367  3028               	movlw	40
  4273     0368  3184  240E  3182   	fcall	_Lcd_Cmd
  4274     036B                     l1715:
  4275     036B  3010               	movlw	16
  4276     036C  3184  240E  3182   	fcall	_Lcd_Cmd
  4277     036F                     l1717:
  4278     036F  3001               	movlw	1
  4279     0370  3184  240E  3182   	fcall	_Lcd_Cmd
  4280     0373                     l1719:
  4281     0373                     l1721:
  4282     0373  300F               	movlw	15
  4283     0374  3184  240E  3182   	fcall	_Lcd_Cmd
  4284     0377                     l49:
  4285     0377  0008               	return
  4286     0378                     __end_of_Lcd_Init:
  4287                           
  4288                           	psect	text19
  4289     040E                     __ptext19:	
  4290 ;; *************** function _Lcd_Cmd *****************
  4291 ;; Defined at:
  4292 ;;		line 150 in file "./flex_lcd.h"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  data            1    wreg     unsigned char 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  data            1    2[COMMON] unsigned char 
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2, status,0
  4301 ;; Tracked objects:
  4302 ;;		On entry : 0/0
  4303 ;;		On exit  : 0/0
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;Total ram usage:        3 bytes
  4311 ;; Hardware stack levels used: 1
  4312 ;; Hardware stack levels required when called: 1
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_Lcd_Init
  4317 ;;		_Lcd_Out
  4318 ;;		_Lcd_Out2
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323     040E                     _Lcd_Cmd:	
  4324                           ;psect for function _Lcd_Cmd
  4325                           
  4326                           
  4327                           ;incstack = 0
  4328                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  4329                           ;Lcd_Cmd@data stored from wreg
  4330     040E  00F2               	movwf	Lcd_Cmd@data
  4331     040F                     l1625:
  4332                           
  4333                           ;./flex_lcd.h: 151: PORTCbits.RC4 = 0; PORTCbits.RC5 = 0;
  4334     040F  0020               	movlb	0	; select bank0
  4335     0410  120E               	bcf	14,4	;volatile
  4336     0411  128E               	bcf	14,5	;volatile
  4337     0412                     l1627:
  4338                           
  4339                           ;./flex_lcd.h: 152: PORTCbits.RC0 = (data & 0b10000000)>>7; PORTCbits.RC1 = (data & 0b01
      +                          000000)>>6;
  4340     0412  0872               	movf	Lcd_Cmd@data,w
  4341     0413  00F0               	movwf	??_Lcd_Cmd
  4342     0414  3007               	movlw	7
  4343     0415                     u1275:
  4344     0415  36F0               	lsrf	??_Lcd_Cmd,f
  4345     0416  0B89               	decfsz	9,f
  4346     0417  2C15               	goto	u1275
  4347     0418  3001               	movlw	1
  4348     0419  0570               	andwf	??_Lcd_Cmd,w
  4349     041A  00F1               	movwf	??_Lcd_Cmd+1
  4350     041B  080E               	movf	14,w	;volatile
  4351     041C  0671               	xorwf	??_Lcd_Cmd+1,w
  4352     041D  39FE               	andlw	-2
  4353     041E  0671               	xorwf	??_Lcd_Cmd+1,w
  4354     041F  008E               	movwf	14	;volatile
  4355     0420  0872               	movf	Lcd_Cmd@data,w
  4356     0421  00F0               	movwf	??_Lcd_Cmd
  4357     0422  3006               	movlw	6
  4358     0423                     u1285:
  4359     0423  36F0               	lsrf	??_Lcd_Cmd,f
  4360     0424  0B89               	decfsz	9,f
  4361     0425  2C23               	goto	u1285
  4362     0426  0870               	movf	??_Lcd_Cmd,w
  4363     0427  3901               	andlw	1
  4364     0428  00F1               	movwf	??_Lcd_Cmd+1
  4365     0429  0DF1               	rlf	??_Lcd_Cmd+1,f
  4366     042A  080E               	movf	14,w	;volatile
  4367     042B  0671               	xorwf	??_Lcd_Cmd+1,w
  4368     042C  39FD               	andlw	-3
  4369     042D  0671               	xorwf	??_Lcd_Cmd+1,w
  4370     042E  008E               	movwf	14	;volatile
  4371                           
  4372                           ;./flex_lcd.h: 153: PORTCbits.RC2 = (data & 0b00100000)>>5; PORTCbits.RC3 = (data & 0b00
      +                          010000)>>4;
  4373     042F  0872               	movf	Lcd_Cmd@data,w
  4374     0430  00F0               	movwf	??_Lcd_Cmd
  4375     0431  3005               	movlw	5
  4376     0432                     u1295:
  4377     0432  36F0               	lsrf	??_Lcd_Cmd,f
  4378     0433  0B89               	decfsz	9,f
  4379     0434  2C32               	goto	u1295
  4380     0435  0870               	movf	??_Lcd_Cmd,w
  4381     0436  3901               	andlw	1
  4382     0437  00F1               	movwf	??_Lcd_Cmd+1
  4383     0438  0DF1               	rlf	??_Lcd_Cmd+1,f
  4384     0439  0DF1               	rlf	??_Lcd_Cmd+1,f
  4385     043A  080E               	movf	14,w	;volatile
  4386     043B  0671               	xorwf	??_Lcd_Cmd+1,w
  4387     043C  39FB               	andlw	-5
  4388     043D  0671               	xorwf	??_Lcd_Cmd+1,w
  4389     043E  008E               	movwf	14	;volatile
  4390     043F  0872               	movf	Lcd_Cmd@data,w
  4391     0440  00F0               	movwf	??_Lcd_Cmd
  4392     0441  3004               	movlw	4
  4393     0442                     u1305:
  4394     0442  36F0               	lsrf	??_Lcd_Cmd,f
  4395     0443  0B89               	decfsz	9,f
  4396     0444  2C42               	goto	u1305
  4397     0445  0870               	movf	??_Lcd_Cmd,w
  4398     0446  3901               	andlw	1
  4399     0447  00F1               	movwf	??_Lcd_Cmd+1
  4400     0448  0DF1               	rlf	??_Lcd_Cmd+1,f
  4401     0449  0DF1               	rlf	??_Lcd_Cmd+1,f
  4402     044A  0DF1               	rlf	??_Lcd_Cmd+1,f
  4403     044B  080E               	movf	14,w	;volatile
  4404     044C  0671               	xorwf	??_Lcd_Cmd+1,w
  4405     044D  39F7               	andlw	-9
  4406     044E  0671               	xorwf	??_Lcd_Cmd+1,w
  4407     044F  008E               	movwf	14	;volatile
  4408     0450                     l1629:
  4409                           
  4410                           ;./flex_lcd.h: 154: _delay(10);
  4411     0450  3003               	movlw	3
  4412     0451                     u1637:
  4413     0451  0B89               	decfsz	9,f
  4414     0452  2C51               	goto	u1637
  4415     0453  0000               	nop
  4416     0454                     l1631:
  4417                           
  4418                           ;./flex_lcd.h: 155: PORTCbits.RC4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0)));
      +                           PORTCbits.RC4 = 0;
  4419     0454  0020               	movlb	0	; select bank0
  4420     0455  160E               	bsf	14,4	;volatile
  4421     0456                     l1633:
  4422     0456  3200               	nop2	;2 cycle nop
  4423     0457  3200               	nop2	;2 cycle nop
  4424     0458  0000               	nop
  4425     0459                     l1635:
  4426     0459  0020               	movlb	0	; select bank0
  4427     045A  120E               	bcf	14,4	;volatile
  4428     045B                     l1637:
  4429                           
  4430                           ;./flex_lcd.h: 156: PORTCbits.RC0 = (data & 0b00001000)>>3; PORTCbits.RC1 = (data & 0b00
      +                          000100)>>2;
  4431     045B  0872               	movf	Lcd_Cmd@data,w
  4432     045C  00F0               	movwf	??_Lcd_Cmd
  4433     045D  3003               	movlw	3
  4434     045E                     u1315:
  4435     045E  36F0               	lsrf	??_Lcd_Cmd,f
  4436     045F  0B89               	decfsz	9,f
  4437     0460  2C5E               	goto	u1315
  4438     0461  3001               	movlw	1
  4439     0462  0570               	andwf	??_Lcd_Cmd,w
  4440     0463  00F1               	movwf	??_Lcd_Cmd+1
  4441     0464  080E               	movf	14,w	;volatile
  4442     0465  0671               	xorwf	??_Lcd_Cmd+1,w
  4443     0466  39FE               	andlw	-2
  4444     0467  0671               	xorwf	??_Lcd_Cmd+1,w
  4445     0468  008E               	movwf	14	;volatile
  4446     0469                     l1639:
  4447     0469  0872               	movf	Lcd_Cmd@data,w
  4448     046A  00F0               	movwf	??_Lcd_Cmd
  4449     046B  3002               	movlw	2
  4450     046C                     u1325:
  4451     046C  36F0               	lsrf	??_Lcd_Cmd,f
  4452     046D  0B89               	decfsz	9,f
  4453     046E  2C6C               	goto	u1325
  4454     046F  0870               	movf	??_Lcd_Cmd,w
  4455     0470  3901               	andlw	1
  4456     0471  00F1               	movwf	??_Lcd_Cmd+1
  4457     0472  0DF1               	rlf	??_Lcd_Cmd+1,f
  4458     0473  080E               	movf	14,w	;volatile
  4459     0474  0671               	xorwf	??_Lcd_Cmd+1,w
  4460     0475  39FD               	andlw	-3
  4461     0476  0671               	xorwf	??_Lcd_Cmd+1,w
  4462     0477  008E               	movwf	14	;volatile
  4463     0478                     l1641:
  4464                           
  4465                           ;./flex_lcd.h: 157: PORTCbits.RC2 = (data & 0b00000010)>>1; PORTCbits.RC3 = (data & 0b00
      +                          000001);
  4466     0478  3672               	lsrf	Lcd_Cmd@data,w
  4467     0479  3901               	andlw	1
  4468     047A  00F0               	movwf	??_Lcd_Cmd
  4469     047B  0DF0               	rlf	??_Lcd_Cmd,f
  4470     047C  0DF0               	rlf	??_Lcd_Cmd,f
  4471     047D  080E               	movf	14,w	;volatile
  4472     047E  0670               	xorwf	??_Lcd_Cmd,w
  4473     047F  39FB               	andlw	-5
  4474     0480  0670               	xorwf	??_Lcd_Cmd,w
  4475     0481  008E               	movwf	14	;volatile
  4476     0482                     l1643:
  4477     0482  0872               	movf	Lcd_Cmd@data,w
  4478     0483  3901               	andlw	1
  4479     0484  00F0               	movwf	??_Lcd_Cmd
  4480     0485  0DF0               	rlf	??_Lcd_Cmd,f
  4481     0486  0DF0               	rlf	??_Lcd_Cmd,f
  4482     0487  0DF0               	rlf	??_Lcd_Cmd,f
  4483     0488  080E               	movf	14,w	;volatile
  4484     0489  0670               	xorwf	??_Lcd_Cmd,w
  4485     048A  39F7               	andlw	-9
  4486     048B  0670               	xorwf	??_Lcd_Cmd,w
  4487     048C  008E               	movwf	14	;volatile
  4488     048D                     l1645:
  4489                           
  4490                           ;./flex_lcd.h: 158: _delay(10);
  4491     048D  3003               	movlw	3
  4492     048E                     u1647:
  4493     048E  0B89               	decfsz	9,f
  4494     048F  2C8E               	goto	u1647
  4495     0490  0000               	nop
  4496     0491                     l1647:
  4497                           
  4498                           ;./flex_lcd.h: 159: PORTCbits.RC4 = 1; _delay((unsigned long)((5)*(4000000/4000000.0)));
      +                           PORTCbits.RC4 = 0;
  4499     0491  0020               	movlb	0	; select bank0
  4500     0492  160E               	bsf	14,4	;volatile
  4501     0493                     l1649:
  4502     0493  3200               	nop2	;2 cycle nop
  4503     0494  3200               	nop2	;2 cycle nop
  4504     0495  0000               	nop
  4505     0496                     l1651:
  4506     0496  0020               	movlb	0	; select bank0
  4507     0497  120E               	bcf	14,4	;volatile
  4508     0498                     l1653:
  4509                           
  4510                           ;./flex_lcd.h: 160: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4511     0498  3008               	movlw	8
  4512     0499  00F0               	movwf	??_Lcd_Cmd
  4513     049A  3023               	movlw	35
  4514     049B                     u1657:
  4515     049B  0B89               	decfsz	9,f
  4516     049C  2C9B               	goto	u1657
  4517     049D  0BF0               	decfsz	??_Lcd_Cmd,f
  4518     049E  2C9B               	goto	u1657
  4519     049F  0000               	nop
  4520     04A0                     l81:
  4521     04A0  0008               	return
  4522     04A1                     __end_of_Lcd_Cmd:
  4523                           
  4524                           	psect	intentry
  4525     0004                     __pintentry:	
  4526 ;; *************** function _ISR_TIMER0 *****************
  4527 ;; Defined at:
  4528 ;;		line 29 in file "main.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used: 1
  4548 ;; This function calls:
  4549 ;;		Nothing
  4550 ;; This function is called by:
  4551 ;;		Interrupt level 1
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555     0004                     _ISR_TIMER0:
  4556                           
  4557                           ;incstack = 0
  4558     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  4559                           
  4560                           ; Regs used in _ISR_TIMER0: [wreg+status,0]
  4561     0005  3180               	pagesel	$
  4562     0006                     i1l1195:
  4563                           
  4564                           ;main.c: 30: 
  4565     0006  1D0B               	btfss	11,2	;volatile
  4566     0007  2809               	goto	u70_21
  4567     0008  280A               	goto	u70_20
  4568     0009                     u70_21:
  4569     0009  281A               	goto	i1l99
  4570     000A                     u70_20:
  4571     000A                     i1l1197:
  4572                           
  4573                           ;main.c: 31: 
  4574     000A  1003               	clrc
  4575     000B  0022               	movlb	2	; select bank2
  4576     000C  1E0D               	btfss	13,4	;volatile
  4577     000D  1403               	setc
  4578     000E  1803               	btfsc	3,0
  4579     000F  2811               	goto	u71_21
  4580     0010  2814               	goto	u71_20
  4581     0011                     u71_21:
  4582     0011  0022               	movlb	2	; select bank2
  4583     0012  160D               	bsf	13,4	;volatile
  4584     0013  2816               	goto	u72_24
  4585     0014                     u71_20:
  4586     0014  0022               	movlb	2	; select bank2
  4587     0015  120D               	bcf	13,4	;volatile
  4588     0016                     u72_24:
  4589     0016                     i1l1199:
  4590                           
  4591                           ;main.c: 32:     ANSELA = 0b0000000;
  4592     0016  307D               	movlw	125
  4593     0017  0020               	movlb	0	; select bank0
  4594     0018  0095               	movwf	21	;volatile
  4595     0019                     i1l1201:
  4596                           
  4597                           ;main.c: 33:     ANSELB = 0b0000000;
  4598     0019  110B               	bcf	11,2	;volatile
  4599     001A                     i1l99:
  4600     001A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4601     001B  0009               	retfie
  4602     001C                     __end_of_ISR_TIMER0:
  4603     007E                     btemp	set	126	;btemp
  4604     007E                     int$flags	set	126
  4605     007E                     wtemp0	set	126
  4606                           
  4607                           	psect	config
  4608                           
  4609                           ;Config register CONFIG1 @ 0x8007
  4610                           ;	Oscillator Selection Bits
  4611                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  4612                           ;	Power-up Timer Enable
  4613                           ;	PWRTE = ON, PWRT enabled
  4614                           ;	MCLR Pin Function Select
  4615                           ;	MCLRE = OFF, MCLR/VPP pin function is digital input
  4616                           ;	Flash Program Memory Code Protection
  4617                           ;	CP = 0x1, unprogrammed default
  4618                           ;	Brown-out Reset Enable
  4619                           ;	BOREN = 0x3, unprogrammed default
  4620                           ;	Clock Out Enable
  4621                           ;	CLKOUTEN = 0x1, unprogrammed default
  4622                           ;	Internal/External Switch Over
  4623                           ;	IESO = 0x1, unprogrammed default
  4624                           ;	Fail-Safe Clock Monitor Enable
  4625                           ;	FCMEN = 0x1, unprogrammed default
  4626     8007                     	org	32775
  4627     8007  3F9C               	dw	16284
  4628                           
  4629                           ;Config register CONFIG2 @ 0x8008
  4630                           ;	Flash Memory Self-Write Protection
  4631                           ;	WRT = 0x3, unprogrammed default
  4632                           ;	Peripheral Pin Select one-way control
  4633                           ;	PPS1WAY = 0x1, unprogrammed default
  4634                           ;	Zero Cross Detect Disable Bit
  4635                           ;	ZCD = 0x1, unprogrammed default
  4636                           ;	PLL Enable Bit
  4637                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
  4638                           ;	Stack Overflow/Underflow Reset Enable
  4639                           ;	STVREN = 0x1, unprogrammed default
  4640                           ;	Brown-out Reset Voltage Selection
  4641                           ;	BORV = 0x1, unprogrammed default
  4642                           ;	Low-Power Brown Out Reset
  4643                           ;	LPBOR = 0x1, unprogrammed default
  4644                           ;	Low-Voltage Programming Enable
  4645                           ;	LVP = 0x1, unprogrammed default
  4646     8008                     	org	32776
  4647     8008  3EFF               	dw	16127
  4648                           
  4649                           ;Config register CONFIG3 @ 0x8009
  4650                           ;	WDT Period Select
  4651                           ;	WDTCPS = 0x1F, unprogrammed default
  4652                           ;	Watchdog Timer Enable
  4653                           ;	WDTE = OFF, WDT disabled
  4654                           ;	WDT Window Select
  4655                           ;	WDTCWS = 0x7, unprogrammed default
  4656                           ;	WDT Input Clock Selector
  4657                           ;	WDTCCS = 0x7, unprogrammed default
  4658     8009                     	org	32777
  4659     8009  3F9F               	dw	16287

Data Sizes:
    Strings     47
    Constant    0
    Data        0
    BSS         79
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     65      72
    BANK1            80      0      72
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 12
		 -> STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[12]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    S625$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_3(CODE[12]), STR_2(CODE[10]), STR_1(CODE[12]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> buffer2(BANK1[20]), buffer1(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S566$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S566$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    Lcd_Out2@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[12]), buffer2(BANK1[20]), buffer1(BANK1[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[6]), STR_5(CODE[7]), 


Critical Paths under _main in COMMON

    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Out->_Lcd_Chr_CP
    _Lcd_Out->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _ISR_TIMER0 in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs

Critical Paths under _ISR_TIMER0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_TIMER0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_TIMER0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_TIMER0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_TIMER0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_TIMER0 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_TIMER0 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_TIMER0 in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_TIMER0 in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_TIMER0 in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_TIMER0 in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_TIMER0 in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_TIMER0 in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8806
                                             63 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                           _Lcd_Out2
                         _TMR0_Timer
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             20    16      4    6338
                                             45 BANK0     18    14      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             7     4      3    5810
                                             38 BANK0      7     4      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           18    16      2    5494
                                             23 BANK0     15    13      2
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   9     7      2     533
                                              6 COMMON     5     3      2
                                              0 BANK0      4     4      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                13    11      2    3672
                                             10 BANK0     13    11      2
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  9     6      3    2066
                                             11 COMMON     3     0      3
                                              4 BANK0      6     6      0
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1     997
                                              8 COMMON     3     2      1
                                              0 BANK0      4     4      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     682
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              7 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _TMR0_Timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             7     4      3    1141
                                              3 COMMON     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out                                              7     4      3     837
                                              3 COMMON     7     4      3
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMMON     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR_TIMER0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Lcd_Chr_CP
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _TMR0_Timer
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _ISR_TIMER0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      48       5       90.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      9E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      9E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon May 29 08:49:05 2023

                         _i 0065                          l62 06CD                          l47 031F  
                        l48 0348                          l81 04A0                          l49 0377  
                        l90 078E                          l75 068A                          l78 040D  
              ___awdiv@sign 0076         ___wmul@multiplicand 0072                         l330 055F  
                       l343 05B2                         l177 06FC                         l179 0710  
                       l640 072D                         l713 02DE                         l705 023D  
                       l723 0763                         l726 0763                         l663 061C  
                       l719 0749                         l681 0183                         l738 0602  
                       l746 06F1                         l666 063C                         l690 0213  
                       l668 0647                         l676 0168                         l749 07A2  
                       l677 0185                         l698 0500                         u740 05B8  
                       u820 070C                         u741 05B7                         u821 070B  
                       u805 06FD                         u910 0551                         u830 0506  
                       u750 05BD                         u911 0550                         u831 0505  
                       u751 05BC                         u815 0702                         u920 0556  
                       u840 0511                         u760 05CC                         u921 0555  
                       u905 0547                         u841 0510                         u761 05CB  
                       u850 0522                         u930 0565                         u770 05EA  
                       u851 0521                         u931 0564                         u771 05E9  
                       u940 0570                         u780 06F1                         u941 056F  
                       u781 06F0                         u870 0532                         u950 057B  
                       u790 06F8                         u871 0531                         u951 057A  
                       u775 05E6                         u791 06F7                         u865 0526  
                       u890 0541                         u970 058B                         u891 0540  
                       u971 058A                         u980 0595                         u885 0533  
                       u981 0594                         u965 057F                         u895 053D  
                       u985 0591                         u995 059A                         _abs 074A  
                       _pad 0603                ___awmod@sign 0076                         wreg 0009  
                      ?_abs 0077                        l1401 0516                        l1411 052A  
                      l1403 051A                        l1421 0546                        l1413 052E  
                      l1405 051C                        l1501 0157                        l1423 054B  
                      l1415 0532                        l1407 0522                        l1351 05B3  
                      l1511 0171                        l1503 015B                        l1417 0541  
                      l1409 0525                        l1425 0551                        l1441 056C  
                      l1433 0560                        l1361 05EA                        l1353 05B8  
                      l1521 018C                        l1513 0175                        l1505 015F  
                      l1601 0290                        l1427 0556                        l1419 0545  
                      l1451 0583                        l1443 0570                        l1435 0561  
                      l1363 05F9                        l1355 05BD                        l1371 06DF  
                      l1523 0191                        l1531 01C3                        l1515 017A  
                      l1507 0164                        l1611 02BC                        l1603 029A  
                      l1701 031D                        l1429 055B                        l1461 059E  
                      l1453 0587                        l1445 0575                        l1437 0565  
                      l1357 05C2                        l1373 06E4                        l1533 01D1  
                      l1541 01F8                        l1525 01AA                        l1517 017F  
                      l1509 016C                        l1381 0701                        l1605 02A6  
                      l1631 0454                        l1711 035F                        l1391 0502  
                      l1455 058B                        l1447 057B                        l1463 05A4  
                      l1439 056A                        l1359 05CC                        l1367 06D0  
                      l1471 0605                        l1543 01FE                        l1535 01D8  
                      l1527 01AF                        l1519 0189                        l1383 0706  
                      l1375 06F2                        l1551 04A3                        l1607 02B3  
                      l1615 02C6                        l1641 0478                        l1633 0456  
                      l1625 040F                        l1721 0373                        l1713 0367  
                      l1705 0336                        l1393 0506                        l1465 05A9  
                      l1457 0595                        l1449 057E                        l1369 06D3  
                      l1481 061F                        l1473 0609                        l1545 0202  
                      l1537 01E5                        l1529 01B3                        l1385 070C  
                      l1377 06F4                        l1561 04E0                        l1553 04A5  
                      l1801 003D                        l1651 0496                        l1643 0482  
                      l1635 0459                        l1627 0412                        l1715 036B  
                      l1707 033E                        l1731 0699                        l1723 068C  
                      l1395 050B                        l1467 05AE                        l1459 0599  
                      l1491 0757                        l1483 0629                        l1475 060F  
                      l1547 0208                        l1539 01F3                        l1379 06F8  
                      l1555 04B6                        l1563 04E8                        l1571 0227  
                      l1811 0044                        l1803 003E                        l1653 0498  
                      l1645 048D                        l1637 045B                        l1629 0450  
                      l1717 036F                        l1709 0342                        l1661 03BE  
                      l1741 06C0                        l1725 068D                        l1397 050D  
                      l1389 0501                        l1485 062E                        l1477 0613  
                      l1493 0142                        l1565 04FC                        l1557 04BE  
                      l1581 0247                        l1573 022F                        l1821 0049  
                      l1813 0045                        l1805 0040                        l1647 0491  
                      l1639 0469                        l1719 0373                        l1671 03E2  
                      l1663 03C0                        l1655 0379                        l1743 06C4  
                      l1727 0691                        l1735 069D                        l1751 064A  
                      l1399 0511                        l1487 0641                        l1479 0619  
                      l1495 0149                        l1559 04CB                        l1591 0275  
                      l1575 0236                        l1831 0060                        l1823 004C  
                      l1815 0046                        l1807 0041                        l1649 0493  
                      l1681 0400                        l1673 03EC                        l1665 03C3  
                      l1657 037C                        l1729 0695                        l1737 06B3  
                      l1753 064E                        l1761 065A                        l1489 074A  
                      l1497 014E                        l1593 0279                        l1585 024C  
                      l1577 023A                        l1569 0216                        l1841 0097  
                      l1833 006D                        l1825 004F                        l1817 0047  
                      l1809 0042                        l1683 0402                        l1675 03F7  
                      l1667 03C5                        l1659 03BA                        l1739 06B8  
                      l1755 0652                        l1763 0670                        l1499 0153  
                      l1595 027A                        l1579 023E                        l1587 0264  
                      l1691 073D                        l1851 00B3                        l1835 007A  
                      l1827 0053                        l1819 0048                        l1685 0405  
                      l1677 03FB                        l1669 03D3                        l1765 0675  
                      l1757 0656                        l1749 0649                        l1597 027F  
                      l1589 026A                        l1941 025F                        l1693 0747  
                      l1781 0713                        l1861 00E5                        l1853 00BC  
                      l1837 0084                        l1829 0057                        l1679 03FD  
                      l1767 067D                        l1943 0662                        l1775 0786  
                      l1599 0286                        l1687 0730                        l1783 0717  
                      l1871 010B                        l1863 00E9                        l1855 00C1  
                      l1847 009C                        l1839 008E                        l1697 02DF  
                      l1945 06A5                        l1769 0681                        l1777 078C  
                      l1689 0735                        l1785 0719                        l1873 0118  
                      l1865 00F6                        l1857 00CE                        l1849 00A9  
                      l1793 0032                        l1699 02ED                        l1779 078D  
                      l1787 071B                        l1875 011C                        l1867 00FA  
                      l1859 00D8                        l1795 0039                        l1789 0725  
                      l1877 0129                        l1869 0107                        l1797 003A  
                      ?_pad 007B                        l1879 0133                        l1799 003C  
                      STR_1 0770                        STR_2 077C                        STR_3 0770  
                      STR_4 0764                        STR_5 078F                        STR_6 0796  
                      u1000 05A4                        u1001 05A3                        u1010 05A9  
                      u1011 05A8                        u1020 0609                        u1100 0157  
                      u1021 0608                        u1101 0156                        u1030 0613  
                      u1110 015F                        u1031 0612                        u1111 015E  
                      u1040 063C                        u1120 0171                        u1200 04B6  
                      u1041 063B                        u1121 0170                        u1201 04B5  
                      u1050 0641                        u1130 017A                        u1210 04FC  
                      u1051 0640                        u1131 0179                        u1211 04FB  
                      u1060 0757                        u1140 01D1                        u1220 0227  
                      u1061 0756                        u1045 0638                        u1141 01D0  
                      u1221 0226                        u1150 01D8                        u1070 0147  
                      u1230 026A                        u1151 01D7                        u1071 0145  
                      u1231 0269                        u1400 0348                        u1160 01E5  
                      u1080 0148                        u1240 0279                        u1305 0442  
                      u1401 0347                        u1065 0753                        u1161 01E4  
                      u1145 01CD                        u1241 0278                        u1410 06CD  
                      u1170 01F3                        u1090 014E                        u1250 0290  
                      u1315 045E                        u1411 06CC                        u1171 01F2  
                      u1091 014D                        u1251 028F                        u1420 068A  
                      u1180 01F8                        u1260 029A                        u1325 046C  
                      u1421 0689                        u1181 01F7                        u1165 01E1  
                      u1261 0299                        u1190 01FE                        u1430 00CE  
                      u1335 037F                        u1191 01FD                        u1175 01EF  
                      u1431 00CD                        u1345 038D                        u1275 0415  
                      u1355 039C                        u1507 0111                        u1435 00CA  
                      u1285 0423                        u1365 03AC                        u1517 0122  
                      u1390 0747                        u1295 0432                        u1607 0318  
                      u1375 03C8                        u1527 03BB                        u1391 0746  
                      u1447 005B                        u1617 0339                        u1537 03F8  
                      u1385 03D6                        u1457 0092                        u1627 0362  
                      u1547 0408                        u1467 00B7                        u1637 0451  
                      u1557 02F0                        u1477 00DE                        u1647 048E  
                      u1567 02F8                        u1487 00EF                        u1657 049B  
                      u1577 0300                        u1497 0100                        u1587 0308  
                      u1597 0310                        i1l99 001A                        _TMR0 0015  
                      abs@a 0077                        _dbuf 00A0                        _main 0032  
                      _dtoa 0140                        _prec 0063                        pad@i 0025  
                      pad@p 007C                        fsr0h 0005                        fsr1h 0007  
                      indf0 0000                        fsr0l 0004                        indf1 0001  
                      fsr1l 0006                        pad@w 0027                        btemp 007E  
                      start 001C             __end_of_Lcd_Cmd 04A1             __end_of_Lcd_Out 06CE  
               ?_ISR_TIMER0 0070                  _Lcd_Chr_CP 0378                       ??_abs 0079  
                     ??_pad 0024              Lcd_Out2@buffer 0074                       ?_main 0070  
                     ?_dtoa 002A             __end_of___awdiv 0560             __end_of___awmod 05B3  
           ___awdiv@divisor 0070             ___awdiv@counter 0075                vfpfcnvrt@fmt 0037  
                     _PORTA 000C                       _PORTB 000D                       _PORTC 000E  
                     u70_20 000A                       u70_21 0009                       u71_20 0014  
                     u71_21 0011                       u72_24 0016                       _TRISA 008C  
                     _TRISB 008D                       _TRISC 008E                 ?_TMR0_Timer 0070  
                     _flags 0067         read_prec_or_width@c 0020         read_prec_or_width@n 0021  
                     _fputc 05B3                       _fputs 06CE                       pad@fp 0029  
                     _width 0061                       _putch 07A2                       dtoa@d 002A  
                     dtoa@i 0034                       dtoa@p 0030                       dtoa@s 0036  
                     dtoa@w 0032                       status 0003                       wtemp0 007E  
           __end_of_sprintf 072E            __end_of_Lcd_Init 0378            __end_of_Lcd_Out2 068B  
           __initialization 001E                __end_of_main 0140                __end_of_dtoa 0214  
                    ??_main 005F                      ??_dtoa 002C  __end_of_read_prec_or_width 0501  
                    ?_fputc 0070                      ?_fputs 0078            ___awdiv@dividend 0072  
                    _ANSELA 018C                      ?_putch 0070                      _ANSELB 018D  
                    _ANSELC 018E                      _T1GPPS 0E13                      i1l1201 0019  
                    i1l1195 0006                      i1l1197 000A                      i1l1199 0016  
                 ??_Lcd_Cmd 0070               vfpfcnvrt@done 0041                   ??_Lcd_Out 0076  
              vfprintf@cfmt 004B                 ?_Lcd_Chr_CP 0070                      ___wmul 06F2  
                 ??___awdiv 0074                   ??___awmod 0074        read_prec_or_width@ap 0076  
          ___awdiv@quotient 0077             ___awmod@divisor 0070             ___awmod@counter 0075  
                    pad@buf 007B                      dtoa@fp 002F                      fputc@c 0070  
                    fputs@c 0020                      fputs@i 0021                      fputs@s 0023  
                    putch@c 0070            __end_of_vfprintf 074A                   ??_sprintf 0051  
   __end_of__initialization 002E              __pcstackCOMMON 0070               __end_of_fputc 0603  
             __end_of_fputs 06F2               __end_of_putch 07A3                   ?_Lcd_Init 0070  
                 ?_Lcd_Out2 0073                     ??_fputc 0073                     ??_fputs 0079  
                   ??_putch 0070                  __pbssBANK0 0061                  __pbssBANK1 00A0  
              ??_ISR_TIMER0 0070                  __pmaintext 0032                     ?___wmul 0070  
                __pintentry 0004                ??_TMR0_Timer 0070                     _OSCTUNE 0098  
                ??_Lcd_Init 0073                  ??_Lcd_Out2 0076          __end_of_ISR_TIMER0 001C  
                   _Lcd_Cmd 040E                     _Lcd_Out 068B                     ___awdiv 0501  
                   ___awmod 0560                   ?_vfprintf 0046          __end_of_TMR0_Timer 078F  
                   __ptext1 0711                     __ptext2 072E                     __ptext3 0214  
                   __ptext4 04A1                     __ptext5 06F2                     __ptext6 0140  
                   __ptext7 0603                     __ptext8 06CE                     __ptext9 05B3  
                   _buffer1 00D4                     _buffer2 00C0       read_prec_or_width@fmt 0023  
          ___awmod@dividend 0072                     _sprintf 0711                     clrloop0 079D  
      end_of_initialization 002E                     fputc@fp 0072                     fputs@fp 0078  
        _read_prec_or_width 04A1           __end_of_vfpfcnvrt 02DF                ??_Lcd_Chr_CP 0070  
                 Lcd_Out2@x 0073                   Lcd_Out2@y 0078         ?_read_prec_or_width 0076  
          vfpfcnvrt@convarg 003D                  ??_vfprintf 0049                   _PORTCbits 000E  
                 _TRISCbits 008E        ??_read_prec_or_width 0078          __end_of_Lcd_Chr_CP 040E  
               vfpfcnvrt@ap 0038                 vfpfcnvrt@cp 0044                 vfpfcnvrt@fp 0043  
            __end_of___wmul 0711         start_initialization 001E                 __end_of_abs 0764  
               __end_of_pad 0648               Lcd_Out@buffer 0074                 vfprintf@fmt 0046  
                  ??___wmul 0074                   ___latbits 0002               __pcstackBANK0 0020  
                  ?_Lcd_Cmd 0070                    ?_Lcd_Out 0073                    ?___awdiv 0070  
                  ?___awmod 0070                    ?_sprintf 004D              ___wmul@product 0074  
                  _LATBbits 010D                   clear_ram0 079C                    Lcd_Out@x 0073  
                  Lcd_Out@y 0078                   _vfpfcnvrt 0214                Lcd_Init@data 0074  
         ___wmul@multiplier 0070                Lcd_Out2@data 0079                    _Lcd_Init 02DF  
                  _Lcd_Out2 0648                  vfprintf@ap 0048                  vfprintf@fp 004A  
                ?_vfpfcnvrt 0037                  sprintf@fmt 004D              Lcd_Chr_CP@data 0072  
                  _dtoa$647 002D                    __ptext10 07A2                    __ptext11 074A  
                  __ptext12 0560                    __ptext13 0501                    __ptext14 0786  
                  __ptext15 0648                    __ptext16 068B                    __ptext17 0378  
                  __ptext18 02DF                    __ptext19 040E                 Lcd_Cmd@data 0072  
                  int$flags 007E                    _vfprintf 072E                 Lcd_Out@data 0079  
                _INTCONbits 000B                    intlevel1 0000                   sprintf@ap 0052  
                _OSCCONbits 0099                  _ISR_TIMER0 0004                 ??_vfpfcnvrt 0039  
             __pstringtext1 0764               __pstringtext2 0770               __pstringtext3 077C  
             __pstringtext4 078F               __pstringtext5 0796               __pstringtext6 0000  
                _OPTION_REG 0095                    sprintf@f 0054                    sprintf@s 0053  
                _TMR0_Timer 0786  
